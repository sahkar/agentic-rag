{
  "326": [
    "EFFICIENT MEMORY MANAGEMENT FOR LARGE LANGUAGE MODEL SERVING WITH PAGEDATTENTION WOOSUK KWON1,ZHUOHAN LI1,SIYUAN ZHUANG1 YING SHENG1,2 LIANMIN ZHENG1 CODY HAO YU3 JOSEPH E. GONZALEZ1 HAO ZHANG4 ION STOICA1 1UC BERKELEY 2STANFORD UNIVERSITY 3INDEPENDENT RESEARCHER 4UC SAN DIEGO ABSTRACT HIGH THROUGHPUT SERVING OF LARGE LANGUAGE MODELS (LLMS) REQUIRES BATCHING SUFFICIENTLY MANY REQUESTS AT A TIME."
  ],
  "136": [
    "HOW- EVER, EXISTING SYSTEMS STRUGGLE BECAUSE THE KEY-VALUE CACHE (KV CACHE) MEMORY FOR EACH REQUEST IS HUGE AND GROWS AND SHRINKS DYNAMICALLY.",
    "THE KV CACHE SIZE GROWS QUICKLY WITH THE NUMBER OF REQUESTS."
  ],
  "63": [
    "WHEN MANAGED INEFFICIENTLY, THIS MEMORY CAN BE SIGNIFICANTLY WASTED BY FRAGMENTATION AND REDUNDANT DUPLICATION, LIMITING THE BATCH SIZE.",
    "MOREOVER, INEFFICIENT MEMORY MANAGE- MENT CAN FURTHER DECREASE THE BATCH SIZE, AS SHOWN IN FIG."
  ],
  "5": [
    "TO ADDRESS THIS PROBLEM, WE PROPOSE PAGEDATTENTION, AN ATTENTION AL- GORITHM INSPIRED BY THE CLASSICAL VIRTUAL MEMORY AND PAG- ING TECHNIQUES IN OPERATING SYSTEMS.",
    "TO ADDRESS THE ABOVE LIMITATIONS, WE PROPOSE PAGEDAT- TENTION, AN ATTENTION ALGORITHM INSPIRED BY THE OPERATING SYSTEMS (OS) SOLUTION TO MEMORY FRAGMENTATION AND SHAR- ING: VIRTUAL MEMORY WITH PAGING.",
    "WE PROPOSE PAGEDATTENTION, AN ATTENTION ALGORITHM THAT OPERATES ON KV CACHE STORED IN NON-CONTIGUOUS PAGED MEMORY, WHICH IS INSPIRED BY THE VIRTUAL MEMORY AND PAGING IN OS.",
    "4.1 PAGEDATTENTION TO ADDRESS THE MEMORY CHALLENGES IN 3, WE INTRODUCE PAGE- DATTENTION, AN ATTENTION ALGORITHM INSPIRED BY THE CLASSIC IDEA OF PAGING 25 IN OPERATING SYSTEMS.",
    "UNLIKE THE TRADITIONAL ATTENTION ALGORITHMS, PAGEDATTENTION ALLOWS STORING CONTINU- OUS KEYS AND VALUES IN NON-CONTIGUOUS MEMORY SPACE.",
    "ILLUSTRATION OF THE PAGEDATTENTION ALGORITHM, WHERE THE ATTENTION KEY AND VALUES VECTORS ARE STORED AS NON-CONTIGUOUS BLOCKS IN THE MEMORY.",
    "10 CONCLUSION THIS PAPER PROPOSES PAGEDATTENTION, A NEW ATTENTION ALGO- RITHM THAT ALLOWS ATTENTION KEYS AND VALUES TO BE STORED IN NON-CONTIGUOUS PAGED MEMORY, AND PRESENTS VLLM, A HIGH-THROUGHPUT LLM SERVING SYSTEM WITH EFFICIENT MEM- ORY MANAGEMENT ENABLED BY PAGEDATTENTION."
  ],
  "13": [
    "ON TOP OF IT, WE BUILD VLLM, AN LLM SERVING SYSTEM THAT ACHIEVES (1) NEAR-ZERO WASTE IN KV CACHE MEMORY AND (2) FLEXIBLE SHARING OF KV CACHE WITHIN AND ACROSS REQUESTS TO FURTHER REDUCE MEM- ORY USAGE.",
    "IN THIS PAPER, WE OBSERVE THAT EXISTING LLM SERVING SYS- TEMS 31, 60 FALL SHORT OF MANAGING THE KV CACHE MEMORY EFFICIENTLY.",
    "THEREFORE, WE CAN MANAGE THE KV CACHE IN A MORE FLEXIBLE WAY AS IN OSS VIRTUAL MEM- ORY: ONE CAN THINK OF BLOCKS AS PAGES, TOKENS AS BYTES, AND REQUESTS AS PROCESSES.",
    "IN THIS WORK, WE BUILD VLLM, A HIGH-THROUGHPUT DISTRIBUTED LLM SERVING ENGINE ON TOP OF PAGEDATTENTION THAT ACHIEVES NEAR-ZERO WASTE IN KV CACHE MEMORY.",
    "KV CACHE MEMORY MANAGEMENT IN EXISTING SYSTEMS.",
    "INSPIRED BY OPERATING SYSTEMS, WE DEMONSTRATE HOW ESTABLISHED TECH- NIQUES, SUCH AS VIRTUAL MEMORY AND COPY-ON-WRITE, CAN BE ADAPTED TO EFFICIENTLY MANAGE KV CACHE AND HANDLE VARIOUS DECODING ALGORITHMS IN LLM SERVING."
  ],
  "131": [
    "OUR EVALUATIONS SHOW THAT VLLM IMPROVES THE THROUGHPUT OF POPULAR LLMS BY 2-4 WITH THE SAME LEVEL OF LATENCY COMPARED TO THE STATE-OF-THE-ART SYSTEMS, SUCH AS FASTERTRANSFORMER AND ORCA.",
    "OUR EVALUATIONS ON VARIOUS MODELS AND WORKLOADS SHOW THAT VLLM IMPROVES THE LLM SERVING THROUGHPUT BY 2-4 COMPARED TO THE STATE-OF-THE-ART SYS- TEMS 31, 60, WITHOUT AFFECTING THE MODEL ACCURACY AT ALL.",
    "6 EVALUATION IN THIS SECTION, WE EVALUATE THE PERFORMANCE OF VLLM UNDER A VARIETY OF WORKLOADS.",
    "OUR EXPERIMENTS SHOW THAT VLLM ACHIEVES 2-4 THROUGHPUT IMPROVEMENTS OVER THE STATE-OF-THE-ART SYSTEMS."
  ],
  "111": [
    "THE IMPROVEMENT IS MORE PRONOUNCED WITH LONGER SEQUENCES, LARGER MODELS, AND MORE COMPLEX DECODING ALGORITHMS.",
    "THE IMPROVEMENTS ARE MORE PRONOUNCED WITH LONGER SEQUENCES, LARGER MODELS, AND MORE COMPLEX DECODING ALGORITHMS (4.3)."
  ],
  "382": [
    "VLLMS SOURCE CODE IS PUBLICLY AVAILABLE AT HTTPS:GITHUB.COMVLLM-PROJECTVLLM."
  ],
  "389": [
    "1 INTRODUCTION THE EMERGENCE OF LARGE LANGUAGE MODELS (LLMS) LIKE GPT 5, 37 AND PALM 9 HAVE ENABLED NEW APPLICATIONS SUCH AS PRO- GRAMMING ASSISTANTS 6, 18 AND UNIVERSAL CHATBOTS 19, 35 THAT ARE STARTING TO PROFOUNDLY IMPACT OUR WORK AND DAILY ROUTINES."
  ],
  "359": [
    "MANY CLOUD COMPANIES 34, 44 ARE RACING TO PRO- VIDE THESE APPLICATIONS AS HOSTED SERVICES."
  ],
  "483": [
    "HOWEVER, RUNNING THESE APPLICATIONS IS VERY EXPENSIVE, REQUIRING A LARGE NUM- BER OF HARDWARE ACCELERATORS SUCH AS GPUS."
  ],
  "485": [
    "ACCORDING TO RECENT ESTIMATES, PROCESSING AN LLM REQUEST CAN BE 10 MORE EXPENSIVE THAN A TRADITIONAL KEYWORD QUERY 43."
  ],
  "415": [
    "GIVEN THESE HIGH COSTS, INCREASING THE THROUGHPUTAND HENCE REDUCING THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION INTERNATIONAL 4.0 LICENSE."
  ],
  "375": [
    "SOSP 23, OCTOBER 2326, 2023, KOBLENZ, GERMANY  2023 COPYRIGHT HELD BY THE OWNERAUTHOR(S)."
  ],
  "295": [
    "ACM ISBN 979-8-4007-0229-72310."
  ],
  "464": [
    "HTTPS:DOI.ORG10.11453600006.3613165 NVIDIA A100 40GB PARAMETERS (26GB, 65) KV CACHE (30) OTHERS 20 30 40 MEMORY USAGE (GB) PARAMETER SIZE EXISTING SYSTEMS VLLM 0 10 20 30 40 BATCH SIZE ( REQUESTS) 0 0.4K 0.8K 1.2K THROUGHPUT (TOKENS) FIGURE 1."
  ],
  "90": [
    "LEFT: MEMORY LAYOUT WHEN SERVING AN LLM WITH 13B PARAMETERS ON NVIDIA A100.",
    "1 (LEFT) ILLUSTRATES THE MEMORY DISTRIBUTION FOR A 13B-PARAMETER LLM ON AN NVIDIA A100 GPU WITH 40GB RAM."
  ],
  "509": [
    "THE PARAMETERS (GRAY) PERSIST IN GPU MEMORY THROUGHOUT SERVING."
  ],
  "37": [
    "THE MEMORY FOR THE KV CACHE (RED) IS (DE)ALLOCATED PER SERVING REQUEST.",
    "TO STORE THE KV CACHE OF A REQUEST IN CONTIGUOUS SPACE, THEY PRE-ALLOCATE A CONTIGU- OUS CHUNK OF MEMORY WITH THE REQUESTS MAXIMUM LENGTH (E.G., 2048 TOKENS).",
    "EVEN IF ALL AVAILABLE MEMORY WAS ALLOCATED TO KV CACHE, ONLY A FEW TENS OF REQUESTS COULD BE ACCOMMODATED.",
    "IN ADDITION, AS THE OUTPUT LENGTH OF A REQUEST GROWS AT DECODING, THE MEMORY REQUIRED FOR ITS KV CACHE ALSO EXPANDS AND MAY EXHAUST AVAILABLE MEMORY FOR INCOMING REQUESTS OR ONGOING GENERATION FOR EXISTING PROMPTS."
  ],
  "379": [
    "A SMALL AMOUNT OF MEMORY (YELLOW) IS USED EPHEMERALLY FOR ACTIVATION."
  ],
  "67": [
    "RIGHT: VLLM SMOOTHS OUT THE RAPID GROWTH CURVE OF KV CACHE MEMORY SEEN IN EXISTING SYSTEMS 31, 60, LEADING TO A NOTABLE BOOST IN SERVING THROUGHPUT.",
    "4.2 KV CACHE MANAGER THE KEY IDEA BEHIND VLLMS MEMORY MANAGER IS ANALOGOUS TO THE VIRTUAL MEMORY 25 IN OPERATING SYSTEMS.",
    "VLLM USES THE IDEAS BE- HIND VIRTUAL MEMORY TO MANAGE THE KV CACHE IN AN LLM SERVICE."
  ],
  "323": [
    "THE COST PER REQUESTOF LLM SERVING SYSTEMS IS BECOMING MORE IMPORTANT."
  ],
  "353": [
    "AT THE CORE OF LLMS LIES AN AUTOREGRESSIVE TRANSFORMER MODEL 53."
  ],
  "284": [
    "THIS MODEL GENERATES WORDS (TOKENS), ONE AT A TIME, BASED ON THE INPUT (PROMPT) AND THE PREVIOUS SEQUENCE OF THE OUTPUTS TOKENS IT HAS GENERATED SO FAR."
  ],
  "385": [
    "FOR EACH RE- QUEST, THIS EXPENSIVE PROCESS IS REPEATED UNTIL THE MODEL OUT- PUTS A TERMINATION TOKEN."
  ],
  "521": [
    "THIS SEQUENTIAL GENERATION PROCESS MAKES THE WORKLOAD MEMORY-BOUND, UNDERUTILIZING THE COM- PUTATION POWER OF GPUS AND LIMITING THE SERVING THROUGHPUT."
  ],
  "328": [
    "IMPROVING THE THROUGHPUT IS POSSIBLE BY BATCHING MULTI- PLE REQUESTS TOGETHER."
  ],
  "503": [
    "HOWEVER, TO PROCESS MANY REQUESTS IN A BATCH, THE MEMORY SPACE FOR EACH REQUEST SHOULD BE EFFICIENTLY MANAGED."
  ],
  "61": [
    "FOR EXAMPLE, FIG.",
    "FIG.",
    "IN FIG.",
    "FIG.",
    "SPECIFICALLY, IN FIG.",
    "FIG.",
    "FIG.",
    "FIG.",
    "FIG.",
    "FIG.",
    "IN FIG."
  ],
  "381": [
    "APPROXIMATELY 65 OF THE MEM- ORY IS ALLOCATED FOR THE MODEL WEIGHTS, WHICH REMAIN STATIC DURING SERVING."
  ],
  "374": [
    "CLOSE TO 30 OF THE MEMORY IS USED TO STORE THE DYNAMIC STATES OF THE REQUESTS."
  ],
  "526": [
    "FOR TRANSFORMERS, THESE STATES CONSIST OF THE KEY AND VALUE TENSORS ASSOCIATED WITH THE ATTENTION MECHANISM, COMMONLY REFERRED TO AS KV CACHE 41, WHICH REPRESENT THE CONTEXT FROM EARLIER TOKENS TO GENER- ATE NEW OUTPUT TOKENS IN SEQUENCE."
  ],
  "511": [
    "THE REMAINING SMALL EQUAL CONTRIBUTION."
  ],
  "492": [
    "611 ORCA (MAX) ORCA (POW2) ORCA (ORACLE) VLLM 0 20 40 60 80 100 KV CACHE USAGE () 20.4 13.3 57.3 8.9 26.8 17.9 13.6 41.6 38.2 25.2 36.6 96.3 TOKEN STATES RESERVATION INTERNAL FRAG."
  ],
  "343": [
    "EXTERNAL FRAG."
  ],
  "281": [
    "OTHERS FIGURE 2."
  ],
  "0": [
    "AVERAGE PERCENTAGE OF MEMORY WASTES IN DIFFERENT LLM SERVING SYSTEMS DURING THE EXPERIMENT IN 6.2.",
    "IN SUMMARY, WE MAKE THE FOLLOWING CONTRIBUTIONS:  WE IDENTIFY THE CHALLENGES IN MEMORY ALLOCATION IN SERVING LLMS AND QUANTIFY THEIR IMPACT ON SERVING PERFORMANCE."
  ],
  "311": [
    "PERCENTAGE OF MEMORY IS USED FOR OTHER DATA, INCLUDING AC- TIVATIONS  THE EPHEMERAL TENSORS CREATED WHEN EVALUATING THE LLM."
  ],
  "523": [
    "SINCE THE MODEL WEIGHTS ARE CONSTANT AND THE AC- TIVATIONS ONLY OCCUPY A SMALL FRACTION OF THE GPU MEMORY, THE WAY THE KV CACHE IS MANAGED IS CRITICAL IN DETERMINING THE MAXIMUM BATCH SIZE."
  ],
  "118": [
    "WHEN MANAGED INEFFICIENTLY, THE KV CACHE MEMORY CAN SIGNIFICANTLY LIMIT THE BATCH SIZE AND CONSEQUENTLY THE THROUGHPUT OF THE LLM, AS ILLUSTRATED IN FIG.",
    "3 MEMORY CHALLENGES IN LLM SERVING ALTHOUGH FINE-GRAINED BATCHING REDUCES THE WASTE OF COM- PUTING AND ENABLES REQUESTS TO BE BATCHED IN A MORE FLEXIBLE WAY, THE NUMBER OF REQUESTS THAT CAN BE BATCHED TOGETHER IS STILL CONSTRAINED BY GPU MEMORY CAPACITY, PARTICULARLY THE SPACE ALLOCATED TO STORE THE KV CACHE.",
    "THE IDEA OF VIRTUAL MEMORY AND PAGING IS EFFECTIVE FOR MANAGING THE KV CACHE IN LLM SERVING BECAUSE THE WORKLOAD REQUIRES DYNAMIC MEMORY ALLOCATION (SINCE THE OUTPUT LENGTH IS NOT KNOWN A PRIORI) AND ITS PERFOR- MANCE IS BOUND BY THE GPU MEMORY CAPACITY."
  ],
  "363": [
    "1 (RIGHT)."
  ],
  "44": [
    "THIS IS MAINLY BECAUSE THEY STORE THE KV CACHE OF A REQUEST IN CONTIGUOUS MEMORY SPACE, AS MOST DEEP LEARNING FRAMEWORKS 33, 39 REQUIRE TENSORS TO BE STORED IN CONTIGU- OUS MEMORY.",
    "3.1 MEMORY MANAGEMENT IN EXISTING SYSTEMS SINCE MOST OPERATORS IN CURRENT DEEP LEARNING FRAMEWORKS 33, 39 REQUIRE TENSORS TO BE STORED IN CONTIGUOUS MEMORY, PREVIOUS LLM SERVING SYSTEMS 31, 60 ALSO STORE THE KV CACHE OF ONE REQUEST AS A CONTIGUOUS TENSOR ACROSS THE DIFFER- ENT POSITIONS."
  ],
  "320": [
    "HOWEVER, UNLIKE THE TENSORS IN THE TRADITIONAL DEEP LEARNING WORKLOADS, THE KV CACHE HAS UNIQUE CHARAC- TERISTICS: IT DYNAMICALLY GROWS AND SHRINKS OVER TIME AS THE MODEL GENERATES NEW TOKENS, AND ITS LIFETIME AND LENGTH ARE NOT KNOWN A PRIORI."
  ],
  "304": [
    "THESE CHARACTERISTICS MAKE THE EXISTING SYSTEMS APPROACH SIGNIFICANTLY INEFFICIENT IN TWO WAYS: FIRST, THE EXISTING SYSTEMS 31, 60 SUFFER FROM INTERNAL AND EXTERNAL MEMORY FRAGMENTATION."
  ],
  "306": [
    "THIS CAN RESULT IN SEVERE INTERNAL FRAG- MENTATION, SINCE THE REQUESTS ACTUAL LENGTH CAN BE MUCH SHORTER THAN ITS MAXIMUM LENGTH (E.G., FIG."
  ],
  "26": [
    "11).",
    "11).",
    "10."
  ],
  "409": [
    "MOREOVER, EVEN IF THE ACTUAL LENGTH IS KNOWN A PRIORI, THE PRE-ALLOCATION IS STILL INEFFICIENT: AS THE ENTIRE CHUNK IS RESERVED DURING THE REQUESTS LIFETIME, OTHER SHORTER REQUESTS CANNOT UTILIZE ANY PART OF THE CHUNK THAT IS CURRENTLY UNUSED."
  ],
  "540": [
    "BESIDES, EXTERNAL MEMORY FRAGMENTATION CAN ALSO BE SIGNIFICANT, SINCE THE PRE- ALLOCATED SIZE CAN BE DIFFERENT FOR EACH REQUEST."
  ],
  "329": [
    "INDEED, OUR PROFILING RESULTS IN FIG."
  ],
  "29": [
    "2 SHOW THAT ONLY 20.4 - 38.2 OF THE KV CACHE MEMORY IS USED TO STORE THE ACTUAL TOKEN STATES IN THE EXISTING SYSTEMS.",
    "NOTE THAT THE KV CACHE OF ONE TOKEN DEPENDS ON ALL ITS PREVIOUS TOKENS.",
    "THIS MEANS THAT THE KV CACHE OF THE SAME TOKEN APPEARING AT DIFFERENT POSITIONS IN A SEQUENCE WILL BE DIFFERENT.",
    "THE TOKEN IN EACH MEMORY SLOT REPRESENTS ITS KV CACHE.",
    "NOTE THE SAME TOKENS CAN HAVE DIFFERENT KV CACHE WHEN AT DIFFERENT POSITIONS."
  ],
  "390": [
    "SECOND, THE EXISTING SYSTEMS CANNOT EXPLOIT THE OPPORTU- NITIES FOR MEMORY SHARING."
  ],
  "21": [
    "LLM SERVICES OFTEN USE ADVANCED DECODING ALGORITHMS, SUCH AS PARALLEL SAMPLING AND BEAM SEARCH, THAT GENERATE MULTIPLE OUTPUTS PER REQUEST.",
    "LLM SERVICES OFFER A RANGE OF DECODING ALGORITHMS FOR USERS TO SELECT FROM, EACH WITH VARYING IMPLICATIONS FOR MEMORY MANAGEMENT COMPLEXITY.",
    "IN MANY SUCCESSFUL LLM APPLICATIONS 18, 34, AN LLM SERVICE MUST OFFER MORE COMPLEX DECODING SCENARIOS THAT EXHIBIT COMPLEX ACCESSING PATTERNS AND MORE OPPORTUNI- TIES FOR MEMORY SHARING."
  ],
  "4": [
    "IN THESE SCENARIOS, THE REQUEST CONSISTS OF MULTIPLE SEQUENCES THAT CAN PARTIALLY SHARE THEIR KV CACHE.",
    "STORING THE KV CACHE OF TWO REQUESTS AT THE SAME TIME IN VLLM.",
    "ONCE A REQUEST FINISHES ITS GENERATION, ITS KV BLOCKS CAN BE FREED TO STORE THE KV CACHE OF OTHER REQUESTS."
  ],
  "358": [
    "HOWEVER, MEMORY SHARING IS NOT POSSIBLE IN THE EXISTING SYSTEMS BECAUSE THE KV CACHE OF THE SEQUENCES IS STORED IN SEPARATE CONTIGUOUS SPACES."
  ],
  "132": [
    "PAGEDATTENTION DIVIDES THE REQUESTS KV CACHE INTO BLOCKS, EACH OF WHICH CAN CONTAIN THE ATTENTION KEYS AND VALUES OF A FIXED NUMBER OF TOKENS.",
    "DURING THE ATTENTION COMPUTATION, THE PAGEDATTENTION KERNEL IDENTIFIES AND FETCHES DIFFERENT KV BLOCKS SEPARATELY."
  ],
  "77": [
    "IN PAGEDATTENTION, THE BLOCKS FOR THE KV CACHE ARE NOT NECES- SARILY STORED IN CONTIGUOUS SPACE.",
    "THE KV CACHE MANAGER EFFECTIVELY MANAGES THE KV CACHE IN A PAGED FASHION, ENABLED BY PAGEDATTENTION.",
    "WITH THAT, WE SHOW THE DESIGN OF THE KV CACHE MANAGER IN 4.2 AND HOW IT FACILITATES PAGEDATTENTION IN 4.3, RESPEC- TIVELY.",
    "SPECIF- ICALLY, PAGEDATTENTION PARTITIONS THE KV CACHE OF EACH SE- QUENCE INTO KV BLOCKS.",
    "ENABLED BY PAGEDATTENTION, WE ORGANIZE THE KV CACHE AS FIXED-SIZE KV BLOCKS, LIKE PAGES IN VIRTUAL MEMORY."
  ],
  "373": [
    "THIS DESIGN ALLEVIATES INTERNAL FRAG- MENTATION BY USING RELATIVELY SMALL BLOCKS AND ALLOCATING THEM ON DEMAND."
  ],
  "354": [
    "MOREOVER, IT ELIMINATES EXTERNAL FRAGMEN- TATION AS ALL BLOCKS HAVE THE SAME SIZE."
  ],
  "475": [
    "FINALLY, IT ENABLES MEMORY SHARING AT THE GRANULARITY OF A BLOCK, ACROSS THE DIFFERENT SEQUENCES ASSOCIATED WITH THE SAME REQUEST OR EVEN ACROSS THE DIFFERENT REQUESTS."
  ],
  "22": [
    "VLLM USES BLOCK-LEVEL MEMORY MANAGEMENT AND PREEMPTIVE REQUEST SCHEDULING THAT ARE CO-DESIGNED WITH PAGEDATTENTION.",
    "IN SUMMARY, THE PAGEDATTENTION ALGORITHM ALLOWS THE KV BLOCKS TO BE STORED IN NON-CONTIGUOUS PHYSICAL MEMORY, WHICH ENABLES MORE FLEXIBLE PAGED MEMORY MANAGEMENT IN VLLM.",
    "6, TO DEMON- STRATE HOW VLLM EXECUTES PAGEDATTENTION AND MANAGES THE MEMORY DURING THE DECODING PROCESS OF A SINGLE INPUT SE- QUENCE: 1AS IN OSS VIRTUAL MEMORY, VLLM DOES NOT REQUIRE RESERVING THE MEMORY FOR THE MAXIMUM POSSIBLE GENERATED SEQUENCE LENGTH INITIALLY.",
    "DURING LLMS COMPUTATION, VLLM USES THE PAGEDATTENTION KERNEL TO ACCESS THE PREVIOUS KV CACHE STORED IN THE FORM OF LOGICAL KV BLOCKS AND SAVES THE NEWLY GENERATED KV CACHE INTO THE PHYSICAL KV BLOCKS.",
    "VIA ITS PAGEDATTENTION AND PAGED MEMORY MANAGEMENT, VLLM CAN REALIZE THIS SHARING EASILY AND SAVE MEMORY."
  ],
  "386": [
    "VLLM SUPPORTS POPULAR LLMS SUCH AS GPT 5, OPT 62, AND LLAMA 52 WITH VARYING SIZES, INCLUDING THE ONES EXCEEDING THE MEMORY CAPACITY OF A SINGLE GPU."
  ],
  "510": [
    "WE DESIGN AND IMPLEMENT VLLM, A DISTRIBUTED LLM SERVING ENGINE BUILT ON TOP OF PAGEDATTENTION."
  ],
  "50": [
    "WE EVALUATE VLLM ON VARIOUS SCENARIOS AND DEMONSTRATE THAT IT SUBSTANTIALLY OUTPERFORMS THE PREVIOUS STATE-OF-THE- ART SOLUTIONS SUCH AS FASTERTRANSFORMER 31 AND ORCA 60.",
    "COMPARED TO FASTERTRANSFORMER, VLLM CAN SUSTAIN UP TO 22 HIGHER REQUEST RATES, AS FASTERTRANSFORMER DOES NOT UTILIZE A FINE-GRAINED SCHEDULING MECHANISM AND INEFFICIENTLY MANAGES THE MEMORY LIKE ORCA (MAX).",
    "BY REDUCING MEMORY FRAGMENTATION AND ENABLING SHARING, VLLM RUNS MORE REQUESTS IN A BATCH IN PARALLEL AND ACHIEVES A 2-4 SPEEDUP COMPARED TO ORCA."
  ],
  "486": [
    "2 BACKGROUND IN THIS SECTION, WE DESCRIBE THE GENERATION AND SERVING PRO- CEDURES OF TYPICAL LLMS AND THE ITERATION-LEVEL SCHEDULING USED IN LLM SERVING."
  ],
  "549": [
    "612 2.1 TRANSFORMER-BASED LARGE LANGUAGE MODELS THE TASK OF LANGUAGE MODELING IS TO MODEL THE PROBABILITY OF A LIST OF TOKENS (1, ."
  ],
  "302": [
    "SINCE LANGUAGE HAS A NATURAL SEQUENTIAL ORDERING, IT IS COMMON TO FACTORIZE THE JOINT PROB- ABILITY OVER THE WHOLE SEQUENCE AS THE PRODUCT OF CONDITIONAL PROBABILITIES (A.K.A."
  ],
  "279": [
    "AUTOREGRESSIVE DECOMPOSITION 3): ()  (1)  (2  1)    ( 1, ."
  ],
  "522": [
    ",1)."
  ],
  "445": [
    "(1) TRANSFORMERS 53 HAVE BECOME THE DE FACTO STANDARD AR- CHITECTURE FOR MODELING THE PROBABILITY ABOVE AT A LARGE SCALE."
  ],
  "431": [
    "THE MOST IMPORTANT COMPONENT OF A TRANSFORMER-BASED LAN- GUAGE MODEL IS ITS SELF-ATTENTION LAYERS."
  ],
  "449": [
    "FOR AN INPUT HIDDEN STATE SEQUENCE (1, ."
  ],
  "11": [
    ",) R, A SELF-ATTENTION LAYER FIRST APPLIES LINEAR TRANSFORMATIONS ON EACH POSITION TO GET THE QUERY, KEY, AND VALUE VECTORS:  ,  ,  .",
    "(2) THEN, THE SELF-ATTENTION LAYER COMPUTES THE ATTENTION SCORE BY MULTIPLYING THE QUERY VECTOR AT ONE POSITION WITH ALL THE KEY VECTORS BEFORE IT AND COMPUTE THE OUTPUT AS THE WEIGHTED AVERAGE OVER THE VALUE VECTORS:  EXP(   )  1 EXP(   ) ,   1 ."
  ],
  "443": [
    "(3) BESIDES THE COMPUTATION IN EQ."
  ],
  "293": [
    "4, ALL OTHER COMPONENTS IN THE TRANSFORMER MODEL, INCLUDING THE EMBEDDING LAYER, FEED-FORWARD LAYER, LAYER NORMALIZATION 2, RESIDUAL CONNEC- TION 22, OUTPUT LOGIT COMPUTATION, AND THE QUERY, KEY, AND VALUE TRANSFORMATION IN EQ."
  ],
  "423": [
    "2, ARE ALL APPLIED INDEPENDENTLY POSITION-WISE IN A FORM OF  ()."
  ],
  "339": [
    "2.2 LLM SERVICE  AUTOREGRESSIVE GENERATION ONCE TRAINED, LLMS ARE OFTEN DEPLOYED AS A CONDITIONAL GEN- ERATION SERVICE (E.G., COMPLETION API 34 OR CHATBOT 19, 35)."
  ],
  "8": [
    "A REQUEST TO AN LLM SERVICE PROVIDES A LIST OF INPUT PROMPT TOKENS (1, .",
    ",), AND THE LLM SERVICE GENERATES A LIST OF OUTPUT TOKENS (1, ."
  ],
  "190": [
    ",) ACCORDING TO EQ."
  ],
  "56": [
    "1.",
    "2.",
    "4.",
    "2.",
    "2.",
    "4."
  ],
  "403": [
    "WE REFER TO THE CONCATENATION OF THE PROMPT AND OUTPUT LISTS AS SEQUENCE."
  ],
  "432": [
    "DUE TO THE DECOMPOSITION IN EQ."
  ],
  "392": [
    "1, THE LLM CAN ONLY SAM- PLE AND GENERATE NEW TOKENS ONE BY ONE, AND THE GENERATION PROCESS OF EACH NEW TOKEN DEPENDS ON ALL THE PREVIOUS TOKENS IN THAT SEQUENCE, SPECIFICALLY THEIR KEY AND VALUE VECTORS."
  ],
  "33": [
    "IN THIS SEQUENTIAL GENERATION PROCESS, THE KEY AND VALUE VECTORS OF EXISTING TOKENS ARE OFTEN CACHED FOR GENERATING FUTURE TOKENS, KNOWN AS KV CACHE.",
    "A REQUESTS KV CACHE IS REPRESENTED AS A SERIES OF LOGICAL KV BLOCKS, FILLED FROM LEFT TO RIGHT AS NEW TOKENS AND THEIR KV CACHE ARE GENERATED."
  ],
  "58": [
    "GIVEN A REQUEST PROMPT, THE GENERATION COMPUTATION IN THE LLM SERVICE CAN BE DECOMPOSED INTO TWO PHASES: THE PROMPT PHASE TAKES THE WHOLE USER PROMPT (1, .",
    "REQUESTS AND THE LATEST TOKENS FOR GENERATION PHASE REQUESTS) AS ONE SEQUENCE AND FEEDS IT INTO THE LLM."
  ],
  "335": [
    ",) AS INPUT AND COMPUTES THE PROBABILITY OF THE FIRST NEW TO- KEN (1  1, ."
  ],
  "455": [
    "DURING THIS PROCESS, ALSO GENER- ATES THE KEY VECTORS 1, ."
  ],
  "12": [
    ",AND VALUE VECTORS 1, .",
    ",) WITH THE KEY VECTORS 1, .",
    ",AND VALUE VECTORS 1, ."
  ],
  "444": [
    "SINCE PROMPT TOKENS 1, ."
  ],
  "305": [
    ",ARE ALL KNOWN, THE COMPUTA- TION OF THE PROMPT PHASE CAN BE PARALLELIZED USING MATRIX- MATRIX MULTIPLICATION OPERATIONS."
  ],
  "551": [
    "THEREFORE, THIS PHASE CAN EFFICIENTLY USE THE PARALLELISM INHERENT IN GPUS."
  ],
  "348": [
    "THE AUTOREGRESSIVE GENERATION PHASE GENERATES THE RE- MAINING NEW TOKENS SEQUENTIALLY."
  ],
  "461": [
    "AT ITERATION , THE MODEL TAKES ONE TOKEN AS INPUT AND COMPUTES THE PROBABILITY (1  1, ."
  ],
  "388": [
    "NOTE THAT THE KEY AND VALUE VECTORS AT POSITIONS 1 TO  1 ARE CACHED AT PREVIOUS ITERATIONS, ONLY THE NEW KEY AND VALUE VECTOR AND ARE COM- PUTED AT THIS ITERATION."
  ],
  "543": [
    "THIS PHASE COMPLETES EITHER WHEN THE SEQUENCE REACHES A MAXIMUM LENGTH (SPECIFIED BY USERS OR LIMITED BY LLMS) OR WHEN AN END-OF-SEQUENCE (EOS) TOKEN IS EMITTED."
  ],
  "513": [
    "THE COMPUTATION AT DIFFERENT ITERATIONS CANNOT BE PARALLELIZED DUE TO THE DATA DEPENDENCY AND OFTEN USES MATRIX-VECTOR MULTIPLICATION, WHICH IS LESS EFFICIENT."
  ],
  "404": [
    "AS A RE- SULT, THIS PHASE SEVERELY UNDERUTILIZES GPU COMPUTATION AND BECOMES MEMORY-BOUND, BEING RESPONSIBLE FOR MOST PORTION OF THE LATENCY OF A SINGLE REQUEST."
  ],
  "23": [
    "2.3 BATCHING TECHNIQUES FOR LLMS THE COMPUTE UTILIZATION IN SERVING LLMS CAN BE IMPROVED BY BATCHING MULTIPLE REQUESTS.",
    "HOWEVER, BATCHING THE REQUESTS TO AN LLM SERVICE IS NON-TRIVIAL FOR TWO REASONS."
  ],
  "527": [
    "BECAUSE THE REQUESTS SHARE THE SAME MODEL WEIGHTS, THE OVERHEAD OF MOVING WEIGHTS IS AMORTIZED ACROSS THE REQUESTS IN A BATCH, AND CAN BE OVER- WHELMED BY THE COMPUTATIONAL OVERHEAD WHEN THE BATCH SIZE IS SUFFICIENTLY LARGE."
  ],
  "309": [
    "FIRST, THE REQUESTS MAY ARRIVE AT DIFFERENT TIMES."
  ],
  "555": [
    "A NAIVE BATCHING STRAT- EGY WOULD EITHER MAKE EARLIER REQUESTS WAIT FOR LATER ONES OR DELAY THE INCOMING REQUESTS UNTIL EARLIER ONES FINISH, LEAD- ING TO SIGNIFICANT QUEUEING DELAYS."
  ],
  "433": [
    "SECOND, THE REQUESTS MAY HAVE VASTLY DIFFERENT INPUT AND OUTPUT LENGTHS (FIG."
  ],
  "412": [
    "A STRAIGHTFORWARD BATCHING TECHNIQUE WOULD PAD THE INPUTS AND OUTPUTS OF THE REQUESTS TO EQUALIZE THEIR LENGTHS, WASTING GPU COMPUTATION AND MEMORY."
  ],
  "365": [
    "TO ADDRESS THIS PROBLEM, FINE-GRAINED BATCHING MECHA- NISMS, SUCH AS CELLULAR BATCHING 16 AND ITERATION-LEVEL SCHED- ULING 60, HAVE BEEN PROPOSED."
  ],
  "519": [
    "UNLIKE TRADITIONAL METHODS THAT WORK AT THE REQUEST LEVEL, THESE TECHNIQUES OPERATE AT THE ITERATION LEVEL."
  ],
  "88": [
    "AFTER EACH ITERATION, COMPLETED REQUESTS ARE REMOVED FROM THE BATCH, AND NEW ONES ARE ADDED.",
    "THERE- FORE, A NEW REQUEST CAN BE PROCESSED AFTER WAITING FOR A SINGLE ITERATION, NOT WAITING FOR THE ENTIRE BATCH TO COMPLETE."
  ],
  "371": [
    "MOREOVER, WITH SPECIAL GPU KERNELS, THESE TECHNIQUES ELIM- INATE THE NEED TO PAD THE INPUTS AND OUTPUTS."
  ],
  "532": [
    "BY REDUCING THE QUEUEING DELAY AND THE INEFFICIENCIES FROM PADDING, THE FINE-GRAINED BATCHING MECHANISMS SIGNIFICANTLY INCREASE THE THROUGHPUT OF LLM SERVING."
  ],
  "410": [
    "613 FOUR SCORE AND SEVEN YEARS AGO OUR FATHERS BROUGHT FORTH EOS RESV  RESV YOU ONLY LIVE ONCE EOS RESV  RESV 2038 SLOTS NEVER USED (INTERNAL FRAGMENTATION) 2 SLOTS FUTURE USED (RESERVED) EXTERNAL FRAGMENTATION 7 KV CACHE STATES FOR REQUEST AS PROMPT 3 KV CACHE STATES FOR REQUEST BS PROMPT 1 SLOT FUTURE USED (RESERVED) 507 SLOTS NEVER USED (INTERNAL FRAGMENTATION) REQUEST B CURRENT ITERATION REQUEST A CURRENT ITERATION 1 SLOT FOR GENERATED TOKEN FIGURE 3."
  ],
  "552": [
    "THREE TYPES OF MEMORY WASTES  RESERVED, INTERNAL FRAGMENTATION, AND EXTERNAL FRAGMENTATION  EXIST THAT PREVENT OTHER REQUESTS FROM FITTING INTO THE MEMORY."
  ],
  "24": [
    "IN OTHER WORDS, THE SERVING SYSTEMS THROUGHPUT IS MEMORY-BOUND.",
    "AS A RESULT, THE PERFORMANCE OF THE SYSTEMS BECOMES COMPUTE-BOUND RATHER THAN MEMORY-BOUND."
  ],
  "462": [
    "OVERCOM- ING THIS MEMORY-BOUND REQUIRES ADDRESSING THE FOLLOWING CHALLENGES IN THE MEMORY MANAGEMENT: LARGE KV CACHE."
  ],
  "14": [
    "AS AN EXAMPLE, FOR THE 13B PARAMETER OPT MODEL 62, THE KV CACHE OF A SINGLE TOKEN DEMANDS 800 KB OF SPACE, CALCULATED AS 2 (KEY AND VALUE VECTORS)  5120 (HIDDEN STATE SIZE)  40 (NUMBER OF LAYERS)  2 (BYTES PER FP16).",
    "SINCE OPT CAN GENERATE SEQUENCES UP TO 2048 TOKENS, THE MEMORY REQUIRED TO STORE THE KV CACHE OF ONE REQUEST CAN BE AS MUCH AS 1.6 GB."
  ],
  "292": [
    "CONCURRENT GPUS HAVE MEMORY CAPACITIES IN THE TENS OF GBS."
  ],
  "428": [
    "ADDITIONALLY, GIVEN THE CURRENT TRENDS, THE GPUS COMPUTA- TION SPEED GROWS FASTER THAN THE MEMORY CAPACITY 17."
  ],
  "401": [
    "FOR EXAMPLE, FROM NVIDIA A100 TO H100, THE FLOPS INCREASES BY MORE THAN 2X, BUT THE GPU MEMORY STAYS AT 80GB MAX- IMUM."
  ],
  "418": [
    "THEREFORE, WE BELIEVE THE MEMORY WILL BECOME AN INCREASINGLY SIGNIFICANT BOTTLENECK."
  ],
  "30": [
    "COMPLEX DECODING ALGORITHMS.",
    "MIXED DECODING METHODS."
  ],
  "514": [
    "FOR EXAMPLE, WHEN USERS REQUEST MULTIPLE RANDOM SAMPLES FROM A SINGLE INPUT PROMPT, A TYPICAL USE CASE IN PROGRAM SUGGESTION 18, THE KV CACHE OF THE PROMPT PART, WHICH ACCOUNTS FOR 12 OF THE TOTAL KV CACHE MEMORY IN OUR EX- PERIMENT (6.3), CAN BE SHARED TO MINIMIZE MEMORY USAGE."
  ],
  "481": [
    "ON THE OTHER HAND, THE KV CACHE DURING THE AUTOREGRESSIVE GENERATION PHASE SHOULD REMAIN UNSHARED DUE TO THE DIF- FERENT SAMPLE RESULTS AND THEIR DEPENDENCE ON CONTEXT AND POSITION."
  ],
  "424": [
    "THE EXTENT OF KV CACHE SHARING DEPENDS ON THE SPECIFIC DECODING ALGORITHM EMPLOYED."
  ],
  "531": [
    "IN MORE SOPHISTICATED ALGORITHMS LIKE BEAM SEARCH 49, DIFFERENT REQUEST BEAMS CAN SHARE LARGER PORTIONS (UP TO 55 MEMORY SAVING, SEE 6.3) OF THEIR KV CACHE, AND THE SHARING PATTERN EVOLVES AS THE DECODING PROCESS ADVANCES."
  ],
  "299": [
    "SCHEDULING FOR UNKNOWN INPUT  OUTPUT LENGTHS."
  ],
  "120": [
    "THE REQUESTS TO AN LLM SERVICE EXHIBIT VARIABILITY IN THEIR INPUT AND OUTPUT LENGTHS.",
    "LLM SERVICES FACE A UNIQUE CHALLENGE: THE INPUT PROMPTS FOR AN LLM CAN VARY SIGNIFICANTLY IN LENGTH, AND THE RESULTING OUTPUT LENGTHS ARE NOT KNOWN A PRIORI, CONTINGENT ON BOTH THE INPUT PROMPT AND THE MODEL."
  ],
  "420": [
    "THIS REQUIRES THE MEMORY MANAGEMENT SYSTEM TO ACCOMMODATE A WIDE RANGE OF PROMPT LENGTHS."
  ],
  "211": [
    "THE SYSTEM NEEDS TO MAKE SCHEDULING DECISIONS, SUCH AS DELETING OR SWAPPING OUT THE KV CACHE OF SOME REQUESTS FROM GPU MEMORY."
  ],
  "441": [
    "DUE TO THE UNPREDICTABLE OUTPUT LENGTHS FROM THE LLM, THEY STATICALLY ALLOCATE A CHUNK OF MEMORY FOR A REQUEST BASED ON THE REQUESTS MAXIMUM POSSIBLE SEQUENCE LENGTH, IRRESPECTIVE OF THE ACTUAL INPUT OR EVENTUAL OUTPUT LENGTH OF THE REQUEST."
  ],
  "327": [
    "3 ILLUSTRATES TWO REQUESTS: REQUEST A WITH 2048 MAX- IMUM POSSIBLE SEQUENCE LENGTH AND REQUEST B WITH A MAX- IMUM OF 512."
  ],
  "405": [
    "THE CHUNK PRE-ALLOCATION SCHEME IN EXISTING SYSTEMS HAS THREE PRIMARY SOURCES OF MEMORY WASTES: RE- SERVED SLOTS FOR FUTURE TOKENS, INTERNAL FRAGMENTATION DUE TO OVER-PROVISIONING FOR POTENTIAL MAXIMUM SEQUENCE LENGTHS, AND EXTERNAL FRAGMENTATION FROM THE MEMORY ALLOCATOR LIKE THE BUDDY ALLOCATOR."
  ],
  "488": [
    "THE EXTERNAL FRAGMENTATION WILL NEVER BE USED FOR GENERATED TOKENS, WHICH IS KNOWN BEFORE SERVING A REQUEST."
  ],
  "283": [
    "INTERNAL FRAGMENTATION ALSO REMAINS UNUSED, BUT THIS IS ONLY REALIZED AFTER A REQUEST HAS FINISHED SAMPLING."
  ],
  "310": [
    "THEY ARE BOTH PURE MEMORY WASTE."
  ],
  "517": [
    "ALTHOUGH THE RESERVED MEMORY IS EVENTUALLY USED, RESERVING THIS SPACE FOR THE EN- TIRE REQUESTS DURATION, ESPECIALLY WHEN THE RESERVED SPACE IS LARGE, OCCUPIES THE SPACE THAT COULD OTHERWISE BE USED TO PROCESS OTHER REQUESTS."
  ],
  "411": [
    "WE VISUALIZE THE AVERAGE PERCENTAGE OF MEMORY WASTES IN OUR EXPERIMENTS IN FIG."
  ],
  "380": [
    "2, REVEALING THAT THE ACTUAL EFFECTIVE MEMORY IN PREVIOUS SYSTEMS CAN BE AS LOW AS 20.4."
  ],
  "370": [
    "614 KV CACHE MANAGER SCHEDULER CPU BLOCK ALLOCATOR GPU BLOCK ALLOCATOR BLOCK TABLES WORKER 0 MODEL SHARD 0 CACHE ENGINE WORKER 1 MODEL SHARD 1 CACHE ENGINE WORKER N - 1 MODEL SHARD N - 1 CACHE ENGINE  FIGURE 4."
  ],
  "64": [
    "VLLM SYSTEM OVERVIEW.",
    "THE ARCHITECTURE OF VLLM IS SHOWN IN FIG.",
    "FINALLY, WE SHOW HOW THE SYSTEM DESIGN OF VLLM WORKS IN A DISTRIBUTED SETTING (4.6).",
    "WE SHOW THE GENERAL APPLICABILITY OF VLLM ON THEM IN THIS SECTION."
  ],
  "491": [
    "ALTHOUGH COMPACTION 54 HAS BEEN PROPOSED AS A POTEN- TIAL SOLUTION TO FRAGMENTATION, PERFORMING COMPACTION IN A PERFORMANCE-SENSITIVE LLM SERVING SYSTEM IS IMPRACTICAL DUE TO THE MASSIVE KV CACHE."
  ],
  "324": [
    "EVEN WITH COMPACTION, THE PRE-ALLOCATED CHUNK SPACE FOR EACH REQUEST PREVENTS MEMORY SHARING SPECIFIC TO DECODING ALGORITHMS IN EXISTING MEMORY MANAGEMENT SYSTEMS."
  ],
  "477": [
    "4 METHOD IN THIS WORK, WE DEVELOP A NEW ATTENTION ALGORITHM, PAGE- DATTENTION, AND BUILD AN LLM SERVING ENGINE, VLLM, TO TACKLE THE CHALLENGES OUTLINED IN 3."
  ],
  "487": [
    "VLLM ADOPTS A CENTRALIZED SCHEDULER TO COORDINATE THE EXECUTION OF DISTRIBUTED GPU WORKERS."
  ],
  "17": [
    "SPECIFICALLY, THE KV CACHE MANAGER MANAGES THE PHYSICAL KV CACHE MEMORY ON THE GPU WORKERS THROUGH THE INSTRUCTIONS SENT BY THE CENTRALIZED SCHEDULER.",
    "ALTHOUGH EACH GPU WORKER HAS THE SAME PHYSICAL BLOCK IDS, A WORKER ONLY STORES A PORTION OF THE KV CACHE FOR ITS CORRESPONDING ATTENTION HEADS.",
    "IN THE ATTENTION LAYERS, THE GPU WORKERS READ THE KV CACHE ACCORDING TO THE BLOCK TABLE IN THE CONTROL MESSAGE."
  ],
  "9": [
    "NEXT, WE DESCRIBE THE PAGEDATTENTION ALGORITHM IN 4.1.",
    "WE SHOW AN EXAMPLE OF PAGEDATTENTION IN FIG."
  ],
  "457": [
    "THEN, WE SHOW HOW THIS DESIGN FACILITATES EFFECTIVE MEMORY MANAGEMENT FOR VARIOUS DECODING METHODS (4.4) AND HANDLES THE VARIABLE LENGTH INPUT AND OUTPUT SEQUENCES (4.5)."
  ],
  "434": [
    "EACH BLOCK CONTAINS THE KEY AND VALUE VECTORS FOR A FIXED NUMBER OF TOKENS,1 WHICH WE DENOTE AS KV 1IN TRANSFORMER, EACH TOKEN HAS A SET OF KEY AND VALUE VECTORS ACROSS LAYERS AND ATTENTION HEADS WITHIN A LAYER."
  ],
  "221": [
    "ALL THE KEY AND VALUE VECTORS CAN BE MANAGED TOGETHER WITHIN A SINGLE KV BLOCK, OR THE KEY AND VALUE VECTORS AT DIFFERENT HEADS AND LAYERS CAN EACH HAVE A SEPARATE BLOCK AND BE MANAGED IN SEPARATE BLOCK TABLES."
  ],
  "285": [
    "THE TWO DESIGNS HAVE NO PERFORMANCE DIFFERENCE AND WE CHOOSE THE SECOND ONE FOR EASY IMPLEMENTATION."
  ],
  "290": [
    "FORTH QUERY VECTOR YEARS AGO OUR FATHERS BROUGHT FORTH FOUR SCORE AND SEVEN KEY AND VALUE VECTORS BLOCK 1 BLOCK 2 BLOCK 0 FIGURE 5."
  ],
  "18": [
    "BLOCK SIZE ().",
    "WE STUDY THE EFFECT OF BLOCK SIZE IN 7.2."
  ],
  "516": [
    "DENOTE THE KEY BLOCK  ((1)1, ."
  ],
  "336": [
    ",) AND VALUE BLOCK  ((1)1, ."
  ],
  "425": [
    "THE ATTENTION COM- PUTATION IN EQ."
  ],
  "312": [
    "4 CAN BE TRANSFORMED INTO THE FOLLOWING BLOCK- WISE COMPUTATION:  EXP(   )  1 EXP( 1  ) ,    1  , (4) WHERE  (,(1)1, ."
  ],
  "545": [
    ",,) IS THE ROW VECTOR OF ATTEN- TION SCORE ON -TH KV BLOCK."
  ],
  "417": [
    "5: THE KEY AND VALUE VECTORS ARE SPREAD ACROSS THREE BLOCKS, AND THE THREE BLOCKS ARE NOT CONTIGUOUS ON THE PHYSICAL MEMORY."
  ],
  "512": [
    "AT EACH TIME, THE KERNEL MULTIPLIES THE QUERY VECTOR OF THE QUERY TOKEN (FORTH) AND THE KEY VECTORS IN A BLOCK (E.G., KEY VECTORS OF FOUR SCORE AND SEVEN FOR BLOCK 0) TO COMPUTE THE ATTENTION SCORE, AND LATER MULTIPLIESWITH THE VALUE VECTORS IN A BLOCK TO DERIVE THE FINAL ATTENTION OUTPUT ."
  ],
  "518": [
    "OS PARTI- TIONS MEMORY INTO FIXED-SIZED PAGES AND MAPS USER PROGRAMS LOGICAL PAGES TO PHYSICAL PAGES."
  ],
  "387": [
    "CONTIGUOUS LOGICAL PAGES CAN CORRESPOND TO NON-CONTIGUOUS PHYSICAL MEMORY PAGES, AL- LOWING USER PROGRAMS TO ACCESS MEMORY AS THOUGH IT WERE CONTIGUOUS."
  ],
  "360": [
    "MOREOVER, PHYSICAL MEMORY SPACE NEEDS NOT TO BE FULLY RESERVED IN ADVANCE, ENABLING THE OS TO DYNAMICALLY ALLOCATE PHYSICAL PAGES AS NEEDED."
  ],
  "333": [
    "THE LAST KV BLOCKS UNFILLED POSITIONS ARE RESERVED FOR FUTURE GENERATIONS."
  ],
  "322": [
    "ON GPU WORKERS, A BLOCK ENGINE ALLOCATES A CONTIGUOUS CHUNK OF GPU DRAM AND 615 REQUEST A FOUR SCORE AND SEVEN YEARS AGO OUR FATHERS BROUGHT PROMPT: FOUR SCORE AND SEVEN YEARS AGO OUR OUTPUTS: FATHERS  BROUGHT   BLOCK 0 BLOCK 1 BLOCK 2 BLOCK 3 YEARS AGO OUR FATHERS BROUGHT FOUR SCORE AND SEVEN PHYSICAL KV BLOCKS (ON GPU DRAM) BLOCK 0 BLOCK 1 BLOCK 2 BLOCK 3 BLOCK 4 BLOCK 5 BLOCK 6 BLOCK 7 BLOCK 8 LOGICAL KV BLOCKS PHYSICAL BLOCK NUMBER  FILLED 7 4 1 3  4 3 1   BLOCK TABLE 1 1 1 1 1 1 1 2 3 1 1 1 1 2 3 3 3 1 1 1 1 3 1 1 1 2 1 1 1 1 3 FIGURE 6."
  ],
  "331": [
    "BLOCK TABLE TRANSLATION IN VLLM."
  ],
  "245": [
    "DIVIDES IT INTO PHYSICAL KV BLOCKS (THIS IS ALSO DONE ON CPU RAM FOR SWAPPING; SEE 4.5)."
  ],
  "282": [
    "THE KV BLOCK MANAGER ALSO MAINTAINS BLOCK TABLESTHE MAPPING BETWEEN LOGICAL AND PHYSICAL KV BLOCKS OF EACH REQUEST."
  ],
  "372": [
    "EACH BLOCK TABLE ENTRY RECORDS THE CORRESPONDING PHYSICAL BLOCKS OF A LOGICAL BLOCK AND THE NUMBER OF FILLED POSITIONS."
  ],
  "1": [
    "SEPARATING LOGICAL AND PHYSICAL KV BLOCKS ALLOWS VLLM TO DYNAMICALLY GROW THE KV CACHE MEMORY WITHOUT RESERVING IT FOR ALL POSITIONS IN ADVANCE, WHICH ELIMINATES MOST MEMORY WASTE IN EXISTING SYSTEMS, AS IN FIG.",
    "AS ALL THE BLOCKS ARE FILLED FROM LEFT TO RIGHT AND A NEW PHYSICAL BLOCK IS ONLY ALLOCATED WHEN ALL PREVIOUS BLOCKS ARE FULL, VLLM LIMITS ALL THE MEMORY WASTES FOR A REQUEST WITHIN ONE BLOCK, SO IT CAN EFFECTIVELY UTILIZE ALL THE MEMORY, AS SHOWN IN FIG.",
    "IN SUMMARY, VLLM ENABLES THE SHARING OF MOST OF THE SPACE USED TO STORE THE PROMPTS KV CACHE ACROSS MULTIPLE OUTPUT SAMPLES, WITH THE EXCEPTION OF THE FINAL LOGICAL BLOCK, WHICH IS MANAGED BY A COPY-ON-WRITE MECHANISM.",
    "THIS FREQUENT MEMORY COPY OVERHEAD IS SIGNIFICANTLY REDUCED BY VLLMS PHYSICAL BLOCK SHARING.",
    "THIS IS BECAUSE VLLM CONCEALS THE COMPLEX MEMORY SHARING BE- TWEEN DIFFERENT SEQUENCES VIA A COMMON MAPPING LAYER THAT TRANSLATES LOGICAL BLOCKS TO PHYSICAL BLOCKS.",
    "IN SUCH SCENARIOS, INTRODUCING THE VLLMS TECHNIQUES MAY RATHER DEGRADE THE PERFORMANCE DUE TO THE EXTRA OVERHEAD OF MEMORY INDIRECTION AND NON-CONTIGUOUS BLOCK MEMORY."
  ],
  "2": [
    "4.3 DECODING WITH PAGEDATTENTION AND VLLM NEXT, WE WALK THROUGH AN EXAMPLE, AS IN FIG.",
    "2IN THE FIRST AUTOREGRESSIVE DECODING STEP, VLLM GENERATES THE NEW TOKEN WITH THE PAGEDATTENTION ALGORITHM ON PHYSICAL BLOCKS 7 AND 1.",
    "4.4 APPLICATION TO OTHER DECODING SCENARIOS 4.3 SHOWS HOW PAGEDATTENTION AND VLLM HANDLE BASIC DE- CODING ALGORITHMS, SUCH AS GREEDY DECODING AND SAMPLING, THAT TAKE ONE USER PROMPT AS INPUT AND GENERATE A SINGLE OUT- PUT SEQUENCE."
  ],
  "505": [
    "INSTEAD, IT RESERVES ONLY THE NEC- ESSARY KV BLOCKS TO ACCOMMODATE THE KV CACHE GENERATED DURING PROMPT COMPUTATION."
  ],
  "547": [
    "IN THIS CASE, THE PROMPT HAS 7 TOKENS, SO VLLM MAPS THE FIRST 2 LOGICAL KV BLOCKS (0 AND 1) TO 2 PHYSICAL KV BLOCKS (7 AND 1, RESPECTIVELY)."
  ],
  "446": [
    "IN THE PREFILL STEP, VLLM GENERATES THE KV CACHE OF THE PROMPTS AND THE FIRST OUTPUT TOKEN WITH A CONVENTIONAL SELF-ATTENTION ALGORITHM (E.G., 13)."
  ],
  "84": [
    "VLLM THEN STORES THE KV CACHE OF THE FIRST 4 TOKENS IN LOGICAL BLOCK 0 AND THE FOLLOWING 3 TOKENS IN LOGICAL BLOCK 1.",
    "AGAIN, VLLM DYNAMICALLY ASSIGNS NEW PHYSICAL BLOCKS TO LOGICAL BLOCKS AS MORE TOKENS AND THEIR KV CACHE ARE GENER- ATED.",
    "WHEN VLLM EXHAUSTS FREE PHYSICAL BLOCKS FOR NEW TOKENS, IT SELECTS A SET OF SEQUENCES TO EVICT AND TRANSFER THEIR KV CACHE TO THE CPU."
  ],
  "347": [
    "THE REMAINING SLOT IS RESERVED FOR THE SUBSEQUENT AUTOREGRESSIVE GENERATION PHASE."
  ],
  "524": [
    "SINCE ONE SLOT REMAINS AVAILABLE IN THE LAST LOGICAL BLOCK, THE NEWLY GENERATED KV CACHE IS STORED THERE, AND THE BLOCK TABLES FILLED RECORD IS UPDATED."
  ],
  "87": [
    "3AT THE SECOND DECODING STEP, AS THE LAST LOGICAL BLOCK IS FULL, VLLM STORES THE NEWLY GENERATED KV CACHE IN A NEW LOGICAL BLOCK; VLLM ALLOCATES A NEW PHYSICAL BLOCK (PHYSICAL BLOCK 3) FOR IT AND STORES THIS MAPPING IN THE BLOCK TABLE.",
    "GLOBALLY, FOR EACH DECODING ITERATION, VLLM FIRST SELECTS A SET OF CANDIDATE SEQUENCES FOR BATCHING (MORE IN 4.5), AND ALLOCATES THE PHYSICAL BLOCKS FOR THE NEWLY REQUIRED LOGICAL BLOCKS."
  ],
  "400": [
    "THEN, VLLM CONCATENATES ALL THE INPUT TOKENS OF THE CURRENT ITERATION (I.E., ALL TOKENS FOR PROMPT PHASE FOUR SCORE AND SEVEN YEARS AGO OUR FATHERS BROUGHT BLOCK 0 BLOCK 1 BLOCK 2 BLOCK 3 YEARS AGO OUR FATHERS OF TIMES BROUGHT IT WAS THE BEST FOUR SCORE AND SEVEN PHYSICAL KV BLOCKS BLOCK 0 BLOCK 1 BLOCK 2 BLOCK 3 BLOCK 4 BLOCK 5 BLOCK 6 BLOCK 7 BLOCK 8 LOGICAL KV BLOCKS IT WAS THE BEST OF TIMES BLOCK 0 BLOCK 1 BLOCK 2 LOGICAL KV BLOCKS REQUEST A REQUEST B FIGURE 7."
  ],
  "255": [
    "STORING MULTIPLE TOKENS WITHIN A KV BLOCK (BLOCK SIZE  1) ENABLES THE PAGEDATTENTION KERNEL TO PROCESS THE KV CACHE ACROSS MORE POSITIONS IN PARALLEL, THUS INCREASING THE HARDWARE UTILIZATION AND REDUCING LATENCY."
  ],
  "537": [
    "HOWEVER, A LARGER BLOCK SIZE ALSO INCREASES MEMORY FRAGMENTATION."
  ],
  "534": [
    "THIS ALLOWS MORE REQUESTS TO FIT INTO MEM- ORY FOR BATCHINGHENCE IMPROVING THE THROUGHPUT."
  ],
  "506": [
    "7, WE SHOW AN EXAMPLE OF VLLM MANAGING THE MEMORY FOR TWO SEQUENCES."
  ],
  "158": [
    "THE LOGICAL BLOCKS OF THE TWO SEQUENCES ARE MAPPED TO DIFFER- ENT PHYSICAL BLOCKS WITHIN THE SPACE RESERVED BY THE BLOCK ENGINE IN GPU WORKERS.",
    "THE NEIGHBORING LOGICAL BLOCKS OF BOTH SEQUENCES DO NOT NEED TO BE CONTIGUOUS IN PHYSICAL GPU MEMORY AND THE SPACE OF PHYSICAL BLOCKS CAN BE EFFECTIVELY UTILIZED BY BOTH SEQUENCES."
  ],
  "170": [
    "PARALLEL SAMPLING.",
    "PARALLEL SAMPLING EXAMPLE."
  ],
  "502": [
    "IN LLM-BASED PROGRAM ASSISTANTS 6, 18, AN LLM GENERATES MULTIPLE SAMPLED OUTPUTS FOR A SINGLE IN- PUT PROMPT; USERS CAN CHOOSE A FAVORITE OUTPUT FROM VARIOUS CANDIDATES."
  ],
  "313": [
    "SO FAR WE HAVE IMPLICITLY ASSUMED THAT A REQUEST 616 SAMPLE A1 FOUR SCORE AND SEVEN YEARS AGO OUR FATHERS BLOCK 0 BLOCK 1 YEARS AGO OUR MOTHERS YEARS AGO OUR FATHERS FOUR SCORE AND SEVEN PHYSICAL KV BLOCKS BLOCK 0 BLOCK 1 BLOCK 2 BLOCK 3 BLOCK 4 BLOCK 5 BLOCK 6 BLOCK 7 BLOCK 8 LOGICAL KV BLOCKS FOUR SCORE AND SEVEN YEARS AGO OUR MOTHERS BLOCK 0 BLOCK 1 LOGICAL KV BLOCKS SAMPLE A2 COPY-ON-WRITE REF COUNT: 2  1 FIGURE 8."
  ],
  "495": [
    "GENERATES A SINGLE SEQUENCE."
  ],
  "437": [
    "IN THE REMAINDER OF THIS PAPER, WE ASSUME THE MORE GENERAL CASE IN WHICH A REQUEST GENER- ATES MULTIPLE SEQUENCES."
  ],
  "122": [
    "IN PARALLEL SAMPLING, ONE REQUEST INCLUDES MULTIPLE SAMPLES SHARING THE SAME INPUT PROMPT, ALLOWING THE KV CACHE OF THE PROMPT TO BE SHARED AS WELL.",
    "IN PARALLEL SAMPLING, ALL PARAL- LEL SEQUENCES IN A REQUEST CAN SHARE THE KV CACHE FOR THE PROMPT."
  ],
  "427": [
    "8 SHOWS AN EXAMPLE OF PARALLEL DECODING FOR TWO OUT- PUTS."
  ],
  "176": [
    "SINCE BOTH OUTPUTS SHARE THE SAME PROMPT, WE ONLY RESERVE SPACE FOR ONE COPY OF THE PROMPTS STATE AT THE PROMPT PHASE; THE LOGICAL BLOCKS FOR THE PROMPTS OF BOTH SEQUENCES ARE MAPPED TO THE SAME PHYSICAL BLOCKS: THE LOGICAL BLOCK 0 AND 1 OF BOTH SEQUENCES ARE MAPPED TO PHYSICAL BLOCKS 7 AND 1, RESPECTIVELY."
  ],
  "42": [
    "SINCE A SINGLE PHYSICAL BLOCK CAN BE MAPPED TO MULTIPLE LOGICAL BLOCKS, WE INTRODUCE A REFERENCE COUNT FOR EACH PHYSICAL BLOCK.",
    "IN THIS CASE, THE REFERENCE COUNTS FOR PHYSICAL BLOCKS 7 AND 1 ARE BOTH 2."
  ],
  "496": [
    "AT THE GENERATION PHASE, THE TWO OUTPUTS SAMPLE DIFFERENT OUTPUT TOKENS AND NEED SEPARATE STORAGE FOR KV CACHE."
  ],
  "6": [
    "VLLM IMPLEMENTS A COPY-ON- WRITE MECHANISM AT THE BLOCK GRANULARITY FOR THE PHYSICAL BLOCKS THAT NEED MODIFICATION BY MULTIPLE SEQUENCES, SIMILAR TO THE COPY-ON-WRITE TECHNIQUE IN OS VIRTUAL MEMORY (E.G., WHEN FORKING A PROCESS).",
    "8, WHEN SAMPLE A1 NEEDS TO WRITE TO ITS LAST LOGICAL BLOCK (LOGICAL BLOCK 1), VLLM RECOGNIZES THAT THE REFERENCE COUNT OF THE CORRESPOND- ING PHYSICAL BLOCK (PHYSICAL BLOCK 1) IS GREATER THAN 1; IT ALLOCATES A NEW PHYSICAL BLOCK (PHYSICAL BLOCK 3), INSTRUCTS THE BLOCK ENGINE TO COPY THE INFORMATION FROM PHYSICAL BLOCK 1, AND DECREASES THE REFERENCE COUNT TO 1."
  ],
  "344": [
    "NEXT, WHEN SAMPLE A2 WRITES TO PHYSICAL BLOCK 1, THE REFERENCE COUNT IS ALREADY REDUCED TO 1; THUS A2 DIRECTLY WRITES ITS NEWLY GENERATED KV CACHE TO PHYSICAL BLOCK 1."
  ],
  "300": [
    "BY SHARING PHYSICAL BLOCKS ACROSS MULTIPLE SAMPLES, MEMORY USAGE CAN BE GREATLY REDUCED, ESPECIALLY FOR LONG INPUT PROMPTS."
  ],
  "51": [
    "BEAM SEARCH.",
    "BEAM SEARCH EXAMPLE."
  ],
  "466": [
    "IN LLM TASKS LIKE MACHINE TRANSLATION 59, THE USERS EXPECT THE TOP-MOST APPROPRIATE TRANSLATIONS OUT- PUT BY THE LLM."
  ],
  "31": [
    "BEAM SEARCH 49 IS WIDELY USED TO DECODE THE MOST PROBABLE OUTPUT SEQUENCE FROM AN LLM, AS IT MITI- GATES THE COMPUTATIONAL COMPLEXITY OF FULLY TRAVERSING THE BLOCK 10 BLOCK 11 BLOCK 1 BLOCK 3 BLOCK 6 BLOCK 7 BLOCK 5 BLOCK 0 BLOCK 2 BLOCK 4 BLOCK 8 BLOCK 9 BLOCK 12 BEAM CANDIDATE 0 BEAM CANDIDATE 1 BEAM CANDIDATE 2 BEAM CANDIDATE 3 FIGURE 9.",
    "DURING DECODING, BEAM SEARCH EX- PANDS EACH CANDIDATE SEQUENCE IN THE BEAM BY CONSIDERING ALL POSSIBLE TOKENS, COMPUTES THEIR RESPECTIVE PROBABILITIES US- ING THE LLM, AND RETAINS THE TOP-MOST PROBABLE SEQUENCES OUT OF   CANDIDATES, WHERE  IS THE VOCABULARY SIZE."
  ],
  "330": [
    "SAMPLE SPACE."
  ],
  "291": [
    "THE ALGORITHM RELIES ON THE BEAM WIDTH PA- RAMETER , WHICH DETERMINES THE NUMBER OF TOP CANDIDATES RETAINED AT EVERY STEP."
  ],
  "303": [
    "UNLIKE PARALLEL DECODING, BEAM SEARCH FACILITIES SHARING NOT ONLY THE INITIAL PROMPT BLOCKS BUT ALSO OTHER BLOCKS ACROSS DIFFERENT CANDIDATES, AND THE SHARING PATTERNS DYNAMICALLY CHANGE AS THE DECODING PROCESS ADVANCES, SIMILAR TO THE PRO- CESS TREE IN THE OS CREATED BY COMPOUND FORKS."
  ],
  "154": [
    "9 SHOWS HOW VLLM MANAGES THE KV BLOCKS FOR A BEAM SEARCH EX- AMPLE WITH  4."
  ],
  "340": [
    "PRIOR TO THE ITERATION ILLUSTRATED AS THE DOTTED LINE, EACH CANDIDATE SEQUENCE HAS USED 4 FULL LOGI- CAL BLOCKS."
  ],
  "515": [
    "ALL BEAM CANDIDATES SHARE THE FIRST BLOCK 0 (I.E., PROMPT)."
  ],
  "438": [
    "CANDIDATE 3 DIGRESSES FROM OTHERS FROM THE SECOND BLOCK."
  ],
  "34": [
    "CANDIDATES 0-2 SHARE THE FIRST 3 BLOCKS AND DIVERGE AT THE FOURTH BLOCK.",
    "NOW, ALL CANDIDATES SHARE BLOCKS 0, 1, 3; CANDIDATES 0 AND 1 SHARE BLOCK 6, AND CANDIDATES 2 AND 3 FURTHER SHARE BLOCK 7."
  ],
  "140": [
    "AT SUBSEQUENT ITERATIONS, THE TOP-4 PROB- ABLE CANDIDATES ALL ORIGINATE FROM CANDIDATES 1 AND 2."
  ],
  "345": [
    "AS THE ORIGINAL CANDIDATES 0 AND 3 ARE NO LONGER AMONG THE TOP CANDIDATES, THEIR LOGICAL BLOCKS ARE FREED, AND THE REFER- ENCE COUNTS OF CORRESPONDING PHYSICAL BLOCKS ARE REDUCED."
  ],
  "453": [
    "VLLM FREES ALL PHYSICAL BLOCKS WHOSE REFERENCE COUNTS REACH 0 (BLOCKS 2, 4, 5, 8)."
  ],
  "544": [
    "THEN, VLLM ALLOCATES NEW PHYSICAL BLOCKS (BLOCKS 9-12) TO STORE THE NEW KV CACHE FROM THE NEW CAN- DIDATES."
  ],
  "538": [
    "PREVIOUS LLM SERVING SYSTEMS REQUIRE FREQUENT MEMORY COPIES OF THE KV CACHE ACROSS THE BEAM CANDIDATES."
  ],
  "307": [
    "FOR EXAM- PLE, IN THE CASE SHOWN IN FIG."
  ],
  "332": [
    "9, AFTER THE DOTTED LINE, CANDIDATE 3 WOULD NEED TO COPY A LARGE PORTION OF CANDIDATE 2S KV CACHE TO CONTINUE GENERATION."
  ],
  "39": [
    "IN VLLM, MOST BLOCKS OF DIFFERENT BEAM CANDIDATES CAN BE SHARED.",
    "THE SAME STRATEGY IS ALSO APPLIED IN BEAM SEARCH AND PREFIX SHARING BY VLLM."
  ],
  "507": [
    "THE COPY-ON-WRITE MECHANISM IS APPLIED ONLY WHEN THE NEWLY GENERATED TOKENS ARE WITHIN AN OLD SHARED BLOCK, AS IN PARALLEL DECODING."
  ],
  "321": [
    "THIS INVOLVES ONLY COPYING ONE BLOCK OF DATA."
  ],
  "361": [
    "SHARED PREFIX."
  ],
  "472": [
    "COMMONLY, THE LLM USER PROVIDES A (LONG) DESCRIPTION OF THE TASK INCLUDING INSTRUCTIONS AND EXAMPLE INPUTS AND OUTPUTS, ALSO KNOWN AS SYSTEM PROMPT 36."
  ],
  "459": [
    "THE DESCRIPTION IS CONCATENATED WITH THE ACTUAL TASK INPUT TO FORM THE PROMPT OF THE REQUEST."
  ],
  "167": [
    "THE LLM GENERATES OUTPUTS BASED 617 TRANSLATE ENGLISH TO FRENCH: SEA OTTER  LOUTRE DE MER PEPPERMINT  MENTHE POIVRE PLUSH GIRAFE  GIRAFE EN PELUCHE CHEESE  FROMAGE TRANSLATE ENGLISH TO FRENCH: SEA OTTER  LOUTRE DE MER PEPPERMINT  MENTHE POIVRE PLUSH GIRAFE  GIRAFE EN PELUCHE I LOVE YOU  JE TAMIE SHARED PREFIX TASK INPUT TASK OUTPUT SEQUENCE A PROMPT SEQUENCE B PROMPT SEQUENCE A LLM OUTPUT SEQUENCE B LLM OUTPUT FIGURE 10."
  ],
  "277": [
    "SHARED PROMPT EXAMPLE FOR MACHINE TRANSLATION."
  ],
  "504": [
    "THE EXAMPLES ARE ADOPTED FROM 5."
  ],
  "414": [
    "10 SHOWS AN EXAMPLE."
  ],
  "533": [
    "MOREOVER, THE SHARED PREFIX CAN BE FURTHER TUNED, VIA PROMPT ENGINEERING, TO IMPROVE THE ACCURACY OF THE DOWNSTREAM TASKS 26, 27."
  ],
  "355": [
    "FOR THIS TYPE OF APPLICATION, MANY USER PROMPTS SHARE A PREFIX, THUS THE LLM SERVICE PROVIDER CAN STORE THE KV CACHE OF THE PREFIX IN ADVANCE TO REDUCE THE REDUNDANT COMPUTA- TION SPENT ON THE PREFIX."
  ],
  "346": [
    "IN VLLM, THIS CAN BE CONVENIENTLY ACHIEVED BY RESERVING A SET OF PHYSICAL BLOCKS FOR A SET OF PREDEFINED SHARED PREFIXES BY THE LLM SERVICE PROVIDER, AS HOW OS HANDLES SHARED LIBRARY ACROSS PROCESSES."
  ],
  "399": [
    "A USER IN- PUT PROMPT WITH THE SHARED PREFIX CAN SIMPLY MAP ITS LOGI- CAL BLOCKS TO THE CACHED PHYSICAL BLOCKS (WITH THE LAST BLOCK MARKED COPY-ON-WRITE)."
  ],
  "319": [
    "THE PROMPT PHASE COMPUTATION ONLY NEEDS TO EXECUTE ON THE USERS TASK INPUT."
  ],
  "479": [
    "THE DECODING METHODS DIS- CUSSED EARLIER EXHIBIT DIVERSE MEMORY SHARING AND ACCESS- ING PATTERNS."
  ],
  "192": [
    "NONETHELESS, VLLM FACILITATES THE SIMULTANE- OUS PROCESSING OF REQUESTS WITH DIFFERENT DECODING PREFER- ENCES, WHICH EXISTING SYSTEMS CANNOT EFFICIENTLY DO."
  ],
  "287": [
    "THE LLM AND ITS EXECUTION KERNEL ONLY SEE A LIST OF PHYSICAL BLOCK IDS FOR EACH SEQUENCE AND DO NOT NEED TO HANDLE SHARING PAT- TERNS ACROSS SEQUENCES."
  ],
  "413": [
    "COMPARED TO EXISTING SYSTEMS, THIS APPROACH BROADENS THE BATCHING OPPORTUNITIES FOR REQUESTS WITH DIFFERENT SAMPLING REQUIREMENTS, ULTIMATELY INCREASING THE SYSTEMS OVERALL THROUGHPUT."
  ],
  "35": [
    "4.5 SCHEDULING AND PREEMPTION WHEN THE REQUEST TRAFFIC SURPASSES THE SYSTEMS CAPACITY, VLLM MUST PRIORITIZE A SUBSET OF REQUESTS.",
    "WHEN VLLM NEEDS TO PREEMPT REQUESTS, IT ENSURES THAT THE EARLIEST ARRIVED REQUESTS ARE SERVED FIRST AND THE LATEST REQUESTS ARE PREEMPTED FIRST."
  ],
  "407": [
    "IN VLLM, WE ADOPT THE FIRST-COME-FIRST-SERVE (FCFS) SCHEDULING POLICY FOR ALL REQUESTS, ENSURING FAIRNESS AND PREVENTING STARVATION."
  ],
  "236": [
    "AS THE NUMBER OF REQUESTS AND THEIR OUTPUTS GROW, VLLM CAN RUN OUT OF THE GPUS PHYS- ICAL BLOCKS TO STORE THE NEWLY GENERATED KV CACHE.",
    "IF THE BLOCK SIZE IS TOO SMALL, VLLM MAY NOT FULLY UTILIZE THE GPUS PARALLELISM FOR READING AND PROCESSING KV CACHE."
  ],
  "421": [
    "THERE ARE TWO CLASSIC QUESTIONS THAT VLLM NEEDS TO ANSWER IN THIS CONTEXT: (1) WHICH BLOCKS SHOULD IT EVICT?"
  ],
  "79": [
    "(2) HOW TO RECOVER EVICTED BLOCKS IF NEEDED AGAIN?",
    "TO ANSWER THE SECOND QUES- TION OF HOW TO RECOVER AN EVICTED BLOCK, WE CONSIDER TWO TECHNIQUES: SWAPPING."
  ],
  "450": [
    "TYPICALLY, EVICTION POLICIES USE HEURISTICS TO PREDICT WHICH BLOCK WILL BE ACCESSED FUR- THEST IN THE FUTURE AND EVICT THAT BLOCK."
  ],
  "465": [
    "SINCE IN OUR CASE WE KNOW THAT ALL BLOCKS OF A SEQUENCE ARE ACCESSED TOGETHER, WE IMPLEMENT AN ALL-OR-NOTHING EVICTION POLICY, I.E., EITHER EVICT ALL OR NONE OF THE BLOCKS OF A SEQUENCE."
  ],
  "429": [
    "FURTHERMORE, MULTI- PLE SEQUENCES WITHIN ONE REQUEST (E.G., BEAM CANDIDATES IN ONE BEAM SEARCH REQUEST) ARE GANG-SCHEDULED AS A SEQUENCE GROUP."
  ],
  "193": [
    "THE SEQUENCES WITHIN ONE SEQUENCE GROUP ARE ALWAYS PREEMPTED OR RESCHEDULED TOGETHER DUE TO POTENTIAL MEMORY SHARING ACROSS THOSE SEQUENCES."
  ],
  "494": [
    "THIS IS THE CLASSIC TECHNIQUE USED BY MOST VIRTUAL MEMORY IMPLEMENTATIONS WHICH COPY THE EVICTED PAGES TO A SWAP SPACE ON THE DISK."
  ],
  "325": [
    "IN OUR CASE, WE COPY EVICTED BLOCKS TO THE CPU MEMORY."
  ],
  "27": [
    "AS SHOWN IN FIG.",
    "AS SHOWN IN FIG.",
    "THE FIRST ROW OF FIG.",
    "FOR EXAMPLE, AS SHOWN IN FIG.",
    "THE SECOND ROW OF FIG.",
    "AS SHOWN IN THE FIRST ROW OF FIG.",
    "SIMILARLY, THE SECOND ROW OF FIG.",
    "AS SHOWN IN FIG.",
    "AS SHOWN IN FIG."
  ],
  "218": [
    "4, BESIDES THE GPU BLOCK ALLOCATOR, VLLM INCLUDES A CPU BLOCK ALLOCATOR TO MANAGE THE PHYSICAL BLOCKS SWAPPED TO CPU RAM."
  ],
  "470": [
    "ONCE IT PREEMPTS A SEQUENCE AND EVICTS ITS BLOCKS, VLLM STOPS ACCEPTING NEW REQUESTS UNTIL ALL PREEMPTED SEQUENCES ARE COMPLETED."
  ],
  "356": [
    "ONCE A REQUEST COMPLETES, ITS BLOCKS ARE FREED FROM MEMORY, AND THE BLOCKS OF A PREEMPTED SEQUENCE ARE BROUGHT BACK IN TO CONTINUE THE PROCESSING OF THAT SEQUENCE."
  ],
  "535": [
    "NOTE THAT WITH THIS DESIGN, THE NUMBER OF BLOCKS SWAPPED TO THE CPU RAM NEVER EXCEEDS THE NUMBER OF TOTAL PHYSICAL BLOCKS IN THE GPU RAM, SO THE SWAP SPACE ON THE CPU RAM IS BOUNDED BY THE GPU MEMORY ALLOCATED FOR THE KV CACHE."
  ],
  "278": [
    "RECOMPUTATION."
  ],
  "316": [
    "IN THIS CASE, WE SIMPLY RECOMPUTE THE KV CACHE WHEN THE PREEMPTED SEQUENCES ARE RESCHEDULED."
  ],
  "377": [
    "NOTE THAT RECOMPUTATION LATENCY CAN BE SIGNIFICANTLY LOWER THAN THE ORIGINAL LATENCY, AS THE TOKENS GENERATED AT DECODING CAN BE CONCATENATED WITH THE ORIGINAL USER PROMPT AS A NEW PROMPTTHEIR KV CACHE AT ALL POSITIONS CAN BE GENERATED IN ONE PROMPT PHASE ITERATION."
  ],
  "232": [
    "THE PERFORMANCES OF SWAPPING AND RECOMPUTATION DEPEND ON THE BANDWIDTH BETWEEN CPU RAM AND GPU MEMORY AND THE COMPUTATION POWER OF THE GPU."
  ],
  "45": [
    "WE EXAMINE THE SPEEDS OF SWAPPING AND RECOMPUTATION IN 7.3.",
    "7.3 COMPARING RECOMPUTATION AND SWAPPING VLLM SUPPORTS BOTH RECOMPUTATION AND SWAPPING AS ITS RE- COVERY MECHANISMS."
  ],
  "172": [
    "4.6 DISTRIBUTED EXECUTION MANY LLMS HAVE PARAMETER SIZES EXCEEDING THE CAPACITY OF A SINGLE GPU 5, 9."
  ],
  "251": [
    "THEREFORE, IT IS NECESSARY TO PARTITION THEM ACROSS DISTRIBUTED GPUS AND EXECUTE THEM IN A MODEL PARALLEL FASHION 28, 63."
  ],
  "520": [
    "THIS CALLS FOR A MEMORY MANAGER CAPABLE OF HANDLING DISTRIBUTED MEMORY."
  ],
  "349": [
    "VLLM IS EFFECTIVE IN DISTRIBUTED SETTINGS BY SUPPORTING THE WIDELY USED MEGATRON-LM STYLE TENSOR MODEL PARALLELISM STRATEGY ON TRANSFORMERS 47."
  ],
  "406": [
    "THIS STRATEGY ADHERES TO AN SPMD (SINGLE PROGRAM MULTIPLE DATA) EXECUTION SCHEDULE, WHEREIN THE LINEAR LAYERS ARE PARTITIONED 618 TABLE 1."
  ],
  "130": [
    "MODEL SIZES AND SERVER CONFIGURATIONS.",
    "THE DETAILED MODEL SIZES AND SERVER CONFIGURATIONS ARE SHOWN IN TABLE 1."
  ],
  "288": [
    "MODEL SIZE 13B 66B 175B GPUS A100 4A100 8A100-80GB TOTAL GPU MEMORY 40 GB 160 GB 640 GB PARAMETER SIZE 26 GB 132 GB 346 GB MEMORY FOR KV CACHE 12 GB 21 GB 264 GB MAX."
  ],
  "460": [
    "KV CACHE SLOTS 15.7K 9.7K 60.1K TO PERFORM BLOCK-WISE MATRIX MULTIPLICATION, AND THE THE GPUS CONSTANTLY SYNCHRONIZE INTERMEDIATE RESULTS VIA AN ALL- REDUCE OPERATION."
  ],
  "163": [
    "SPECIFICALLY, THE ATTENTION OPERATOR IS SPLIT ON THE ATTENTION HEAD DIMENSION, EACH SPMD PROCESS TAKES CARE OF A SUBSET OF ATTENTION HEADS IN MULTI-HEAD ATTENTION."
  ],
  "430": [
    "WE OBSERVE THAT EVEN WITH MODEL PARALLEL EXECUTION, EACH MODEL SHARD STILL PROCESSES THE SAME SET OF INPUT TOKENS, THUS REQUIRING THE KV CACHE FOR THE SAME POSITIONS."
  ],
  "215": [
    "THEREFORE, VLLM FEATURES A SINGLE KV CACHE MANAGER WITHIN THE CEN- TRALIZED SCHEDULER, AS IN FIG."
  ],
  "530": [
    "DIFFERENT GPU WORKERS SHARE THE MANAGER, AS WELL AS THE MAPPING FROM LOGICAL BLOCKS TO PHYSICAL BLOCKS."
  ],
  "362": [
    "THIS COMMON MAPPING ALLOWS GPU WORKERS TO EXECUTE THE MODEL WITH THE PHYSICAL BLOCKS PROVIDED BY THE SCHEDULER FOR EACH INPUT REQUEST."
  ],
  "368": [
    "IN EACH STEP, THE SCHEDULER FIRST PREPARES THE MESSAGE WITH INPUT TOKEN IDS FOR EACH REQUEST IN THE BATCH, AS WELL AS THE BLOCK TABLE FOR EACH REQUEST."
  ],
  "57": [
    "NEXT, THE SCHEDULER BROADCASTS THIS CONTROL MESSAGE TO THE GPU WORKERS.",
    "IN THE END, THE GPU WORKERS SEND THE SAMPLED TOKENS OF THIS ITERATION BACK TO THE SCHEDULER."
  ],
  "442": [
    "THEN, THE GPU WORKERS START TO EXECUTE THE MODEL WITH THE INPUT TOKEN IDS."
  ],
  "19": [
    "DURING EXECUTION, THE GPU WORKERS SYNCHRONIZE THE INTERMEDIATE RESULTS WITH THE ALL-REDUCE COMMUNICATION PRIMITIVE WITHOUT THE COORDINATION OF THE SCHEDULER, AS IN 47.",
    "IN SUMMARY, GPU WORKERS DO NOT NEED TO SYNCHRONIZE ON MEMORY MANAGEMENT AS THEY ONLY NEED TO RECEIVE ALL THE MEMORY MANAGEMENT INFORMATION AT THE BEGINNING OF EACH DECODING ITERATION ALONG WITH THE STEP INPUTS."
  ],
  "426": [
    "5 IMPLEMENTATION VLLM IS AN END-TO-END SERVING SYSTEM WITH A FASTAPI 15 FRONTEND AND A GPU-BASED INFERENCE ENGINE."
  ],
  "220": [
    "THE FRONTEND EXTENDS THE OPENAI API 34 INTERFACE, ALLOWING USERS TO CUSTOMIZE SAMPLING PARAMETERS FOR EACH REQUEST, SUCH AS THE MAXIMUM SEQUENCE LENGTH AND THE BEAM WIDTH ."
  ],
  "493": [
    "THE VLLM ENGINE IS WRITTEN IN 8.5K LINES OF PYTHON AND 2K LINES OF CCUDA CODE."
  ],
  "162": [
    "WE DEVELOP CONTROL-RELATED COMPONENTS IN- CLUDING THE SCHEDULER AND THE BLOCK MANAGER IN PYTHON WHILE DEVELOPING CUSTOM CUDA KERNELS FOR KEY OPERATIONS SUCH AS PAGEDATTENTION."
  ],
  "206": [
    "FOR THE MODEL EXECUTOR, WE IMPLEMENT POP- ULAR LLMS SUCH AS GPT 5, OPT 62, AND LLAMA 52 USING 0 500 1000 1500 2000  TOKENS 0.0 0.5 1.0 1.5 2.0 DENSITY 1E2 INPUT (MEAN: 161.31) OUTPUT (MEAN: 337.99) (A) SHAREGPT 0 500 1000 1500 2000  TOKENS 0 2 4 6 8 DENSITY 1E2 INPUT (MEAN: 19.31) OUTPUT (MEAN: 58.45) (B) ALPACA FIGURE 11."
  ],
  "62": [
    "INPUT AND OUTPUT LENGTH DISTRIBUTIONS OF THE (A) SHAREGPT AND (B) ALPACA DATASETS.",
    "11, THE SHAREGPT DATASET HAS 8.4 LONGER INPUT PROMPTS AND 5.8 LONGER OUTPUTS ON AVERAGE THAN THE ALPACA DATASET, WITH HIGHER VARIANCE."
  ],
  "205": [
    "PYTORCH 39 AND TRANSFORMERS 58."
  ],
  "480": [
    "WE USE NCCL 32 FOR TENSOR COMMUNICATION ACROSS THE DISTRIBUTED GPU WORKERS."
  ],
  "10": [
    "5.1 KERNEL-LEVEL OPTIMIZATION SINCE PAGEDATTENTION INTRODUCES MEMORY ACCESS PATTERNS THAT ARE NOT EFFICIENTLY SUPPORTED BY EXISTING SYSTEMS, WE DEVELOP SEVERAL GPU KERNELS FOR OPTIMIZING IT.",
    "7.1 KERNEL MICROBENCHMARK THE DYNAMIC BLOCK MAPPING IN PAGEDATTENTION AFFECTS THE PERFORMANCE OF THE GPU OPERATIONS INVOLVING THE STORED KV CACHE, I.E., BLOCK READWRITES AND ATTENTION."
  ],
  "40": [
    "(1) FUSED RE- SHAPE AND BLOCK WRITE.",
    "(3) FUSED BLOCK COPY."
  ],
  "214": [
    "IN EVERY TRANSFORMER LAYER, THE NEW KV CACHE ARE SPLIT INTO BLOCKS, RESHAPED TO A MEMORY LAYOUT OPTIMIZED FOR BLOCK READ, THEN SAVED AT POSITIONS SPECIFIED BY THE BLOCK TABLE."
  ],
  "65": [
    "TO MINIMIZE KERNEL LAUNCH OVERHEADS, WE FUSE THEM INTO A SINGLE KERNEL.",
    "TO MITIGATE THE OVERHEAD, WE IMPLEMENT A KERNEL THAT BATCHES THE COPY OPERATIONS FOR DIFFERENT BLOCKS INTO A SINGLE KERNEL LAUNCH."
  ],
  "463": [
    "(2) FUSING BLOCK READ AND ATTEN- TION."
  ],
  "199": [
    "WE ADAPT THE ATTENTION KERNEL IN FASTERTRANSFORMER 31 TO READ KV CACHE ACCORDING TO THE BLOCK TABLE AND PERFORM ATTENTION OPERATIONS ON THE FLY."
  ],
  "173": [
    "TO ENSURE COALESCED MEMORY ACCESS, WE ASSIGN A GPU WARP TO READ EACH BLOCK."
  ],
  "416": [
    "MORE- OVER, WE ADD SUPPORT FOR VARIABLE SEQUENCE LENGTHS WITHIN A REQUEST BATCH."
  ],
  "213": [
    "BLOCK COPY OPERATIONS, ISSUED BY THE COPY-ON-WRITE MECHANISM, MAY OPERATE ON DISCONTINUOUS BLOCKS."
  ],
  "447": [
    "THIS CAN LEAD TO NUMEROUS INVOCATIONS OF SMALL DATA MOVEMENTS IF WE USE THE CUDAMEMCPYASYNC API."
  ],
  "489": [
    "5.2 SUPPORTING VARIOUS DECODING ALGORITHMS VLLM IMPLEMENTS VARIOUS DECODING ALGORITHMS USING THREE KEY METHODS: FORK, APPEND, AND FREE."
  ],
  "350": [
    "THE FORK METHOD CREATES A NEW SEQUENCE FROM AN EXISTING ONE."
  ],
  "476": [
    "THE APPEND METHOD APPENDS A NEW TOKEN TO THE SEQUENCE."
  ],
  "317": [
    "FINALLY, THE FREE METHOD DELETES THE SEQUENCE."
  ],
  "149": [
    "FOR INSTANCE, IN PARAL- LEL SAMPLING, VLLM CREATES MULTIPLE OUTPUT SEQUENCES FROM THE SINGLE INPUT SEQUENCE USING THE FORK METHOD."
  ],
  "357": [
    "IT THEN ADDS NEW TOKENS TO THESE SEQUENCES IN EVERY ITERATION WITH APPEND, AND DELETES SEQUENCES THAT MEET A STOPPING CONDI- TION USING FREE."
  ],
  "501": [
    "WE BELIEVE FUTURE DECOD- ING ALGORITHMS CAN ALSO BE SUPPORTED BY COMBINING THESE METHODS."
  ],
  "46": [
    "619 0.0 0.5 1.0 1.5 2.0 REQUEST RATE (REQS) (A) OPT-13B, 1 GPU, SHAREGPT 0.0 0.5 1.0 0.0 0.2 0.4 0.6 0.8 1.0 REQUEST RATE (REQS) (B) OPT-66B, 4 GPUS, SHAREGPT 0.0 0.5 1.0 0.0 0.5 1.0 1.5 2.0 2.5 REQUEST RATE (REQS) (C) OPT-175B, 8 GPUS, SHAREGPT 0.0 0.5 1.0 NORMALIZED LATENCY (STOKEN) FASTERTRANSFORMER ORCA (MAX) ORCA (POW2) ORCA (ORACLE) VLLM 0 10 20 30 REQUEST RATE (REQS) (D) OPT-13B, 1 GPU, ALPACA 0.0 0.5 1.0 0 5 10 15 20 REQUEST RATE (REQS) (E) OPT-66B, 4 GPUS, ALPACA 0.0 0.5 1.0 0 5 10 15 20 REQUEST RATE (REQS) (F) OPT-175B, 8 GPUS, ALPACA 0.0 0.5 1.0 NORMALIZED LATENCY (STOKEN) FIGURE 12.",
    "620 0 5 10 15 REQUEST RATE (REQS) (A) PARALLEL GENERATION (PARALLEL SIZE  2) 0.0 0.5 1.0 0 2 4 6 8 10 REQUEST RATE (REQS) (B) PARALLEL GENERATION (PARALLEL SIZE  4) 0.0 0.5 1.0 0 2 4 6 REQUEST RATE (REQS) (C) PARALLEL GENERATION (PARALLEL SIZE  6) 0.0 0.5 1.0 NORMALIZED LATENCY (STOKEN) ORCA (MAX) ORCA (POW2) ORCA (ORACLE) VLLM 0 5 10 15 REQUEST RATE (REQS) (D) BEAM SEARCH (BEAM WIDTH  2) 0.0 0.5 1.0 0 2 4 6 8 10 REQUEST RATE (REQS) (E) BEAM SEARCH (BEAM WIDTH  4) 0.0 0.5 1.0 0 2 4 6 REQUEST RATE (REQS) (F) BEAM SEARCH (BEAM WIDTH  6) 0.0 0.5 1.0 NORMALIZED LATENCY (STOKEN) FIGURE 14.",
    "0.0 0.2 0.4 0.6 0.8 REQUEST RATE (REQS) 0.0 0.5 1.0 NORMALIZED LATENCY (STOKEN) ORCA (MAX) ORCA (POW2) ORCA (ORACLE) VLLM FIGURE 17."
  ],
  "177": [
    "SINGLE SEQUENCE GENERATION WITH OPT MODELS ON THE SHAREGPT AND ALPACA DATASET ORCA (MAX) ORCA (POW2) ORCA (ORACLE) VLLM 0 5 10 15 20 25 30 35  BATCHED REQUESTS 7.00 9.81 13.62 30.42 (A) SHAREGPT ORCA (MAX) ORCA (POW2) ORCA (ORACLE) VLLM 0 25 50 75 100 125 150  BATCHED REQUESTS 7.00 43.24 72.75 132.44 (B) ALPACA FIGURE 13."
  ],
  "554": [
    "AVERAGE NUMBER OF BATCHED REQUESTS WHEN SERV- ING OPT-13B FOR THE SHAREGPT (2 REQSS) AND ALPACA (30 REQSS) TRACES."
  ],
  "396": [
    "6.1 EXPERIMENTAL SETUP MODEL AND SERVER CONFIGURATIONS."
  ],
  "280": [
    "WE USE OPT 62 MOD- ELS WITH 13B, 66B, AND 175B PARAMETERS AND LLAMA 52 WITH 13B PARAMETERS FOR OUR EVALUATION."
  ],
  "497": [
    "13B AND 66B ARE POPULAR SIZES FOR LLMS AS SHOWN IN AN LLM LEADERBOARD 38, WHILE 175B IS THE SIZE OF THE FAMOUS GPT-3 5 MODEL."
  ],
  "395": [
    "FOR ALL OF OUR EXPERIMENTS, WE USE A2 INSTANCES WITH NVIDIA A100 GPUS ON GOOGLE CLOUD PLATFORM."
  ],
  "242": [
    "WE SYNTHESIZE WORKLOADS BASED ON SHAREGPT 51 AND ALPACA 50 DATASETS, WHICH CONTAIN INPUT AND OUTPUT TEXTS OF REAL LLM SERVICES."
  ],
  "25": [
    "THE SHAREGPT DATASET IS A COLLEC- TION OF USER-SHARED CONVERSATIONS WITH CHATGPT 35.",
    "WE SYNTHESIZE THE CHATTING HISTORY AND USER QUERY USING THE SHAREGPT DATASET."
  ],
  "308": [
    "THE ALPACA DATASET IS AN INSTRUCTION DATASET GENERATED BY GPT- 3.5 WITH SELF-INSTRUCT 57."
  ],
  "541": [
    "WE TOKENIZE THE DATASETS AND USE THEIR INPUT AND OUTPUT LENGTHS TO SYNTHESIZE CLIENT REQUESTS."
  ],
  "152": [
    "SINCE THESE DATASETS DO NOT INCLUDE TIMESTAMPS, WE GENERATE REQUEST ARRIVAL TIMES USING POISSON DISTRIBUTION WITH DIFFERENT REQUEST RATES."
  ],
  "82": [
    "BASELINE 1: FASTERTRANSFORMER.",
    "FASTERTRANSFORMER."
  ],
  "391": [
    "FASTERTRANSFORMER 31 IS A DISTRIBUTED INFERENCE ENGINE HIGHLY OPTIMIZED FOR LATENCY."
  ],
  "498": [
    "AS FASTERTRANSFORMER DOES NOT HAVE ITS OWN SCHEDULER, WE IMPLEMENT A CUSTOM SCHEDULER WITH A DYNAMIC BATCHING MECHANISM SIMILAR TO THE EXISTING SERVING SYSTEMS SUCH AS TRITON 30."
  ],
  "224": [
    "SPECIFICALLY, WE SET A MAXIMUM BATCH SIZE AS LARGE AS POSSIBLE FOR EACH EXPERIMENT, ACCORDING TO THE GPU MEMORY CAPACITY."
  ],
  "367": [
    "THE SCHEDULER TAKES UP TO NUMBER OF EARLIEST ARRIVED REQUESTS AND SENDS THE BATCH TO FASTERTRANS- FORMER FOR PROCESSING."
  ],
  "71": [
    "BASELINE 2: ORCA.",
    "FOR THIS REASON, THE THREE ORCA BASELINES BEHAVE SIMILARLY."
  ],
  "448": [
    "ORCA 60 IS A STATE-OF-THE-ART LLM SERVING SYSTEM OPTIMIZED FOR THROUGHPUT."
  ],
  "55": [
    "SINCE ORCA IS NOT PUBLICLY AVAILABLE FOR USE, WE IMPLEMENT OUR OWN VERSION OF ORCA.",
    "WE IMPLEMENT THREE VERSIONS OF ORCA BASED ON HOW MUCH IT OVER-RESERVES THE SPACE FOR REQUEST OUTPUTS:  ORCA (ORACLE)."
  ],
  "247": [
    "WE ASSUME ORCA USES THE BUDDY ALLOCATION ALGORITHM TO DETER- MINE THE MEMORY ADDRESS TO STORE KV CACHE."
  ],
  "194": [
    "WE ASSUME THE SYSTEM HAS THE KNOWLEDGE OF THE LENGTHS OF THE OUTPUTS THAT WILL BE ACTUALLY GENERATED FOR THE REQUESTS."
  ],
  "254": [
    "THIS SHOWS THE UPPER-BOUND PERFORMANCE OF ORCA, WHICH IS INFEASIBLE TO ACHIEVE IN PRACTICE."
  ],
  "525": [
    "ORCA (POW2)."
  ],
  "451": [
    "WE ASSUME THE SYSTEM OVER-RESERVES THE SPACE FOR OUTPUTS BY AT MOST 2."
  ],
  "289": [
    "FOR EXAMPLE, IF THE TRUE OUTPUT LENGTH IS 25, IT RESERVES 32 POSITIONS FOR OUTPUTS."
  ],
  "70": [
    "ORCA (MAX).",
    "COMPARISON TO ORCA."
  ],
  "297": [
    "WE ASSUME THE SYSTEM ALWAYS RESERVES THE SPACE UP TO THE MAXIMUM SEQUENCE LENGTH OF THE MODEL, I.E., 2048 TOKENS."
  ],
  "376": [
    "KEY METRICS."
  ],
  "265": [
    "WE FOCUS ON SERVING THROUGHPUT."
  ],
  "536": [
    "SPECIFICALLY, USING THE WORKLOADS WITH DIFFERENT REQUEST RATES, WE MEA- SURE NORMALIZED LATENCY OF THE SYSTEMS, THE MEAN OF EVERY REQUESTS END-TO-END LATENCY DIVIDED BY ITS OUTPUT LENGTH, AS IN ORCA 60."
  ],
  "454": [
    "A HIGH-THROUGHPUT SERVING SYSTEM SHOULD RETAIN LOW NORMALIZED LATENCY AGAINST HIGH REQUEST RATES."
  ],
  "271": [
    "FOR MOST EXPERIMENTS, WE EVALUATE THE SYSTEMS WITH 1-HOUR TRACES."
  ],
  "252": [
    "AS AN EXCEPTION, WE USE 15-MINUTE TRACES FOR THE OPT-175B MODEL DUE TO THE COST LIMIT."
  ],
  "259": [
    "PARALLEL GENERATION AND BEAM SEARCH WITH OPT-13B ON THE ALPACA DATASET."
  ],
  "231": [
    "6.2 BASIC SAMPLING WE EVALUATE THE PERFORMANCE OF VLLM WITH BASIC SAMPLING (ONE SAMPLE PER REQUEST) ON THREE MODELS AND TWO DATASETS."
  ],
  "117": [
    "12 SHOWS THE RESULTS ON THE SHAREGPT DATASET.",
    "13B SHOWS THE RESULTS ON THE ALPACA DATASET, WHICH FOLLOWS A SIMILAR TREND TO THE SHAREGPT DATASET."
  ],
  "452": [
    "THE CURVES ILLUSTRATE THAT AS THE REQUEST RATE IN- CREASES, THE LATENCY INITIALLY INCREASES AT A GRADUAL PACE BUT THEN SUDDENLY EXPLODES."
  ],
  "294": [
    "THIS CAN BE ATTRIBUTED TO THE FACT THAT WHEN THE REQUEST RATE SURPASSES THE CAPACITY OF THE SERV- ING SYSTEM, THE QUEUE LENGTH CONTINUES TO GROW INFINITELY AND SO DOES THE LATENCY OF THE REQUESTS."
  ],
  "7": [
    "ON THE SHAREGPT DATASET, VLLM CAN SUSTAIN 1.72.7 HIGHER REQUEST RATES COMPARED TO ORCA (ORACLE) AND 2.78 COMPARED TO ORCA (MAX), WHILE MAINTAINING SIMILAR LATEN- CIES.",
    "13A, FOR OPT-13B VLLM PROCESSES 2.2 MORE REQUESTS AT THE SAME TIME THAN ORCA (ORACLE) AND 4.3 MORE REQUESTS THAN ORCA (MAX).",
    "16 (A), VLLM ACHIEVES 1.67 HIGHER THROUGH- PUT THAN ORCA (ORACLE) WHEN THE ONE-SHOT PREFIX IS SHARED.",
    "16 (B)), VLLM ACHIEVES 3.58 HIGHER THROUGHPUT THAN ORCA (ORACLE)."
  ],
  "47": [
    "THIS IS BECAUSE VLLMS PAGEDATTENTION CAN EFFICIENTLY MANAGE THE MEMORY USAGE AND THUS ENABLE BATCHING MORE REQUESTS THAN ORCA.",
    "THE ITERATION-LEVEL SCHEDULING IN ORCA 60 AND PAGEDATTENTION IN VLLM ARE COMPLEMENTARY TECHNIQUES: WHILE BOTH SYSTEMS AIM TO INCREASE THE GPU UTILIZATION AND HENCE THE THROUGHPUT OF LLM SERVING, ORCA ACHIEVES IT BY SCHEDULING AND INTERLEAVING THE REQUESTS SO THAT MORE REQUESTS CAN BE PROCESSED IN PARALLEL, WHILE VLLM IS DOING SO BY INCREASING MEMORY UTILIZATION SO THAT THE WORKING SETS OF MORE REQUESTS FIT INTO MEMORY."
  ],
  "484": [
    "12 AND FIG."
  ],
  "542": [
    "ONE EXCEPTION IS FIG."
  ],
  "301": [
    "12 (F), WHERE VLLMS ADVANTAGE OVER ORCA (ORACLE) AND ORCA (POW2) IS LESS PRO- NOUNCED."
  ],
  "419": [
    "THIS IS BECAUSE THE MODEL AND SERVER CONFIGURATION FOR OPT-175B (TABLE 1) ALLOWS FOR LARGE GPU MEMORY SPACE AVAILABLE TO STORE KV CACHE, WHILE THE ALPACA DATASET HAS SHORT SEQUENCES."
  ],
  "338": [
    "IN THIS SETUP, ORCA (ORACLE) AND ORCA (POW2) CAN ALSO BATCH A LARGE NUMBER OF REQUESTS DESPITE THE INEF- FICIENCIES IN THEIR MEMORY MANAGEMENT."
  ],
  "260": [
    "2 4 6  OUTPUT SEQUENCES 0 4 8 12 MEMORY SAVING () 6.09 8.53 9.79 (A) PARALLEL SAMPLING 2 4 6 BEAM WIDTH 0 20 40 60 MEMORY SAVING () 37.56 53.13 55.16 (B) BEAM SEARCH FIGURE 15."
  ],
  "378": [
    "AVERAGE AMOUNT OF MEMORY SAVING FROM SHARING KV BLOCKS, WHEN SERVING OPT-13B FOR THE ALPACA TRACE."
  ],
  "20": [
    "6.3 PARALLEL SAMPLING AND BEAM SEARCH WE EVALUATE THE EFFECTIVENESS OF MEMORY SHARING IN PAGE- DATTENTION WITH TWO POPULAR SAMPLING METHODS: PARALLEL SAMPLING AND BEAM SEARCH.",
    "WE SHOW 6.1 - 9.8 MEMORY SAVING ON PARALLEL SAMPLING AND 37.6 - 55.2 ON BEAM SEARCH.",
    "IN THE SAME EXPERIMENTS WITH THE SHAREGPT DATASET, WE SAW 16.2 - 30.5 MEMORY SAVING ON PARALLEL SAMPLING AND 44.3 - 66.3 ON BEAM SEARCH."
  ],
  "66": [
    "14, WITH A LARGER NUMBER OF SEQUENCES TO SAMPLE, VLLM BRINGS MORE IMPROVE- MENT OVER THE ORCA BASELINES.",
    "17 SHOWS THAT VLLM CAN SUSTAIN 2 HIGHER REQUEST RATES COMPARED TO THE THREE ORCA BASELINES."
  ],
  "189": [
    "14 SHOWS THE RESULTS FOR BEAM SEARCH WITH DIFFERENT BEAM WIDTHS."
  ],
  "539": [
    "SINCE BEAM SEARCH ALLOWS FOR MORE SHARING, VLLM DEMONSTRATES EVEN GREATER PERFORMANCE BENEFITS."
  ],
  "286": [
    "THE IM- PROVEMENT OF VLLM OVER ORCA (ORACLE) ON OPT-13B AND THE ALPACA DATASET GOES FROM 1.3 IN BASIC SAMPLING TO 2.3 IN BEAM SEARCH WITH A WIDTH OF 6."
  ],
  "458": [
    "15 PLOTS THE AMOUNT OF MEMORY SAVING, COMPUTED BY THE NUMBER OF BLOCKS WE SAVED BY SHARING DIVIDED BY THE NUMBER OF TOTAL BLOCKS WITHOUT SHARING."
  ],
  "334": [
    "6.4 SHARED PREFIX WE EXPLORE THE EFFECTIVENESS OF VLLM FOR THE CASE A PREFIX IS SHARED AMONG DIFFERENT INPUT PROMPTS, AS ILLUSTRATED IN 621 0 20 40 REQUEST RATE (REQS) (A) 1-SHOT PREFIX PROMPT 0.0 0.5 1.0 0 20 40 REQUEST RATE (REQS) (B) 5-SHOT PREFIX PROMPT 0.0 0.5 1.0 NORMALIZED LATENCY (STOKEN) ORCA (ORACLE) VLLM FIGURE 16."
  ],
  "209": [
    "TRANSLATION WORKLOAD WHERE THE INPUT PROMPTS SHARE A COMMON PREFIX."
  ],
  "550": [
    "THE PREFIX INCLUDES (A) 1 EXAMPLE WITH 80 TOKENS OR (B) 5 EXAMPLES WITH 341 TOKENS."
  ],
  "186": [
    "PERFORMANCE ON CHATBOT WORKLOAD."
  ],
  "256": [
    "FOR THE MODEL, WE USE LLAMA-13B 52, WHICH IS MUL- TILINGUAL."
  ],
  "178": [
    "FOR THE WORKLOAD, WE USE THE WMT16 4 ENGLISH- TO-GERMAN TRANSLATION DATASET AND SYNTHESIZE TWO PREFIXES THAT INCLUDE AN INSTRUCTION AND A FEW TRANSLATION EXAMPLES."
  ],
  "94": [
    "THE FIRST PREFIX INCLUDES A SINGLE EXAMPLE (I.E., ONE-SHOT) WHILE THE OTHER PREFIX INCLUDES 5 EXAMPLES (I.E., FEW-SHOT)."
  ],
  "171": [
    "FURTHERMORE, WHEN MORE EXAMPLES ARE SHARED (FIG."
  ],
  "384": [
    "6.5 CHATBOT A CHATBOT 8, 19, 35 IS ONE OF THE MOST IMPORTANT APPLICATIONS OF LLMS."
  ],
  "456": [
    "TO IMPLEMENT A CHATBOT, WE LET THE MODEL GENERATE A RESPONSE BY CONCATENATING THE CHATTING HISTORY AND THE LAST USER QUERY INTO A PROMPT."
  ],
  "179": [
    "DUE TO THE LIMITED CONTEXT LENGTH OF THE OPT-13B MODEL, WE CUT THE PROMPT TO THE LAST 1024 TOKENS AND LET THE MODEL GENERATE AT MOST 1024 TOKENS."
  ],
  "473": [
    "WE DO NOT STORE THE KV CACHE BETWEEN DIFFERENT CONVERSATION ROUNDS AS DOING THIS WOULD OCCUPY THE SPACE FOR OTHER REQUESTS BETWEEN THE CONVERSATION ROUNDS."
  ],
  "383": [
    "SINCE THE SHAREGPT DATASET CONTAINS MANY LONG CONVERSATIONS, THE INPUT PROMPTS FOR MOST REQUESTS HAVE 1024 TOKENS."
  ],
  "155": [
    "DUE TO THE BUDDY ALLO- CATION ALGORITHM, THE ORCA BASELINES RESERVE THE SPACE FOR 1024 TOKENS FOR THE REQUEST OUTPUTS, REGARDLESS OF HOW THEY PREDICT THE OUTPUT LENGTHS."
  ],
  "553": [
    "IN CONTRAST, VLLM CAN EFFECTIVELY 64 128 256 CONTEXT LENGTH 0 50 100 150 200 250 KERNEL LATENCY (US) VLLM (BS 8) FT (BS 8) VLLM (BS 32) FT (BS 32) (A) LATENCY OF ATTENTION KERNELS."
  ],
  "402": [
    "1 2 4 8 16 32 64 128 256 BLOCK SIZE 0.0 2.5 5.0 7.5 10.0 12.5 15.0 17.5 NORMALIZED LATENCY (STOKEN) SHAREGPT ALPACA (B) END-TO-END LATENCY WITH DIF- FERENT BLOCK SIZES."
  ],
  "115": [
    "FIGURE 18."
  ],
  "91": [
    "ABLATION EXPERIMENTS.",
    "7 ABLATION STUDIES IN THIS SECTION, WE STUDY VARIOUS ASPECTS OF VLLM AND EVALU- ATE THE DESIGN CHOICES WE MAKE WITH ABLATION EXPERIMENTS."
  ],
  "314": [
    "HANDLE THE LONG PROMPTS, AS PAGEDATTENTION RESOLVES THE PROBLEM OF MEMORY FRAGMENTATION AND RESERVATION."
  ],
  "248": [
    "COMPARED TO THE EXISTING SYSTEMS, OUR GPU KERNELS (5) INVOLVE EXTRA OVER- HEADS OF ACCESSING THE BLOCK TABLE, EXECUTING EXTRA BRANCHES, AND HANDLING VARIABLE SEQUENCE LENGTHS."
  ],
  "197": [
    "18A, THIS LEADS TO 2026 HIGHER ATTENTION KERNEL LATENCY, COM- PARED TO THE HIGHLY-OPTIMIZED FASTERTRANSFORMER IMPLEMEN- TATION."
  ],
  "364": [
    "WE BELIEVE THE OVERHEAD IS SMALL AS IT ONLY AFFECTS THE ATTENTION OPERATOR BUT NOT THE OTHER OPERATORS IN THE MODEL, SUCH AS LINEAR."
  ],
  "467": [
    "DESPITE THE OVERHEAD, PAGEDATTENTION MAKES VLLM SIGNIFICANTLY OUTPERFORM FASTERTRANSFORMER IN END-TO-END PERFORMANCE (6)."
  ],
  "258": [
    "7.2 IMPACT OF BLOCK SIZE THE CHOICE OF BLOCK SIZE CAN HAVE A SUBSTANTIAL IMPACT ON THE PERFORMANCE OF VLLM."
  ],
  "508": [
    "IF THE BLOCK SIZE IS TOO LARGE, INTER- NAL FRAGMENTATION INCREASES AND THE PROBABILITY OF SHARING DECREASES."
  ],
  "296": [
    "18B, WE EVALUATE THE PERFORMANCE OF VLLM WITH DIF- FERENT BLOCK SIZES, USING THE SHAREGPT AND ALPACA TRACES WITH BASIC SAMPLING UNDER FIXED REQUEST RATES."
  ],
  "490": [
    "IN THE SHAREGPT TRACE, BLOCK SIZES FROM 16 TO 128 LEAD TO THE BEST PERFORMANCE."
  ],
  "257": [
    "IN THE ALPACA TRACE, WHILE THE BLOCK SIZE 16 AND 32 WORK WELL, LARGER BLOCK SIZES SIGNIFICANTLY DEGRADE THE PERFORMANCE SINCE THE SEQUENCES BECOME SHORTER THAN THE BLOCK SIZES."
  ],
  "469": [
    "IN PRACTICE, WE FIND THAT THE BLOCK SIZE 16 IS LARGE ENOUGH TO EFFICIENTLY UTILIZE THE GPU AND SMALL ENOUGH TO AVOID SIGNIFI- CANT INTERNAL FRAGMENTATION IN MOST WORKLOADS."
  ],
  "225": [
    "ACCORDINGLY, VLLM SETS ITS DEFAULT BLOCK SIZE AS 16."
  ],
  "268": [
    "622 1 2 4 8 16 32 64 128 256 BLOCK SIZE 0 20 40 60 80 100 120 140 TIME (MS) RECOMPUTE SWAP IN SWAP OUT SWAP IN  OUT (A) MICROBENCHMARK 1 2 4 8 16 32 64 128 256 BLOCK SIZE 0.0 0.5 1.0 1.5 2.0 2.5 NORMALIZED LATENCY (STOKEN) RECOMPUTE SWAP (B) END-TO-END PERFORMANCE FIGURE 19."
  ],
  "60": [
    "(A) OVERHEAD OF RECOMPUTATION AND SWAPPING FOR DIFFERENT BLOCK SIZES.",
    "IN CONTRAST, THE OVERHEAD OF RECOMPUTATION REMAINS CONSTANT ACROSS DIF- FERENT BLOCK SIZES, AS RECOMPUTATION DOES NOT UTILIZE THE KV BLOCKS.",
    "THUS, RECOMPUTATION IS MORE EFFICIENT WHEN THE BLOCK SIZE IS SMALL, WHILE SWAPPING IS MORE EFFICIENT WHEN THE BLOCK SIZE IS LARGE, THOUGH RECOMPUTATION OVERHEAD IS NEVER HIGHER THAN 20 OF SWAPPINGS LATENCY."
  ],
  "191": [
    "(B) PERFORMANCE WHEN SERVING OPT-13B WITH THE SHAREGPT TRACES AT THE SAME REQUEST RATE."
  ],
  "397": [
    "TO UNDERSTAND THE TRADEOFFS BETWEEN THE TWO METHODS, WE EVALUATE THEIR END-TO-END PERFORMANCE AND MICROBENCHMARK THEIR OVERHEADS, AS PRESENTED IN FIG."
  ],
  "208": [
    "19."
  ],
  "96": [
    "OUR RESULTS REVEAL THAT SWAPPING INCURS EXCESSIVE OVERHEAD WITH SMALL BLOCK SIZES."
  ],
  "341": [
    "THIS IS BECAUSE SMALL BLOCK SIZES OFTEN RESULT IN NUMEROUS SMALL DATA TRANSFERS BETWEEN CPU AND GPU, WHICH LIMITS THE EFFECTIVE PCIE BANDWIDTH."
  ],
  "123": [
    "FOR MEDIUM BLOCK SIZES FROM 16 TO 64, THE TWO METHODS EXHIBIT COMPARABLE END-TO-END PERFORMANCE."
  ],
  "54": [
    "8 DISCUSSION APPLYING THE VIRTUAL MEMORY AND PAGING TECHNIQUE TO OTHER GPU WORKLOADS.",
    "BESIDES, VLLM MITIGATES THE OVERHEAD OF MEMORY INDIRECTION IN PAGING BY FUSING THE GPU KERNELS FOR MEMORY ACCESS OPERATIONS WITH THOSE FOR OTHER OPERATIONS SUCH AS ATTENTION."
  ],
  "342": [
    "HOWEVER, THIS DOES NOT GENERALLY HOLD FOR EVERY GPU WORKLOAD."
  ],
  "269": [
    "FOR EXAM- PLE, IN DNN TRAINING, THE TENSOR SHAPES ARE TYPICALLY STATIC, AND THUS MEMORY ALLOCATION CAN BE OPTIMIZED AHEAD OF TIME."
  ],
  "188": [
    "FOR ANOTHER EXAMPLE, IN SERVING DNNS THAT ARE NOT LLMS, AN INCREASE IN MEMORY EFFICIENCY MAY NOT RESULT IN ANY PER- FORMANCE IMPROVEMENT SINCE THE PERFORMANCE IS PRIMARILY COMPUTE-BOUND."
  ],
  "138": [
    "HOWEVER, WE WOULD BE EXCITED TO SEE VLLMS TECHNIQUES BEING APPLIED TO OTHER WORKLOADS WITH SIMILAR PROPERTIES TO LLM SERVING."
  ],
  "352": [
    "LLM-SPECIFIC OPTIMIZATIONS IN APPLYING VIRTUAL MEM- ORY AND PAGING."
  ],
  "212": [
    "VLLM RE-INTERPRETS AND AUGMENTS THE IDEA OF VIRTUAL MEMORY AND PAGING BY LEVERAGING THE APPLICATION- SPECIFIC SEMANTICS."
  ],
  "187": [
    "ONE EXAMPLE IS VLLMS ALL-OR-NOTHING SWAP-OUT POLICY, WHICH EXPLOITS THE FACT THAT PROCESSING A REQUEST REQUIRES ALL OF ITS CORRESPONDING TOKEN STATES TO BE STORED IN GPU MEMORY."
  ],
  "147": [
    "ANOTHER EXAMPLE IS THE RECOMPUTA- TION METHOD TO RECOVER THE EVICTED BLOCKS, WHICH IS NOT FEASI- BLE IN OS."
  ],
  "529": [
    "9 RELATED WORK GENERAL MODEL SERVING SYSTEMS."
  ],
  "151": [
    "MODEL SERVING HAS BEEN AN ACTIVE AREA OF RESEARCH IN RECENT YEARS, WITH NUMEROUS SYSTEMS PROPOSED TO TACKLE DIVERSE ASPECTS OF DEEP LEARNING MODEL DEPLOYMENT."
  ],
  "474": [
    "CLIPPER 11, TENSORFLOW SERVING 33, NEXUS 45, INFERLINE 10, AND CLOCKWORK 20 ARE SOME EARLIER GENERAL MODEL SERVING SYSTEMS."
  ],
  "216": [
    "THEY STUDY BATCH- ING, CACHING, PLACEMENT, AND SCHEDULING FOR SERVING SINGLE OR MULTIPLE MODELS."
  ],
  "318": [
    "MORE RECENTLY, DVABATCH 12 INTRO- DUCES MULTI-ENTRY MULTI-EXIT BATCHING."
  ],
  "239": [
    "REEF 21 AND SHEP- HERD 61 PROPOSE PREEMPTION FOR SERVING."
  ],
  "116": [
    "ALPASERVE 28 UTILIZES MODEL PARALLELISM FOR STATISTICAL MULTIPLEXING.",
    "ALPASERVE: STATISTICAL MULTIPLEXING WITH MODEL PARALLELISM FOR DEEP LEARNING SERVING."
  ],
  "164": [
    "HOW- EVER, THESE GENERAL SYSTEMS FAIL TO TAKE INTO ACCOUNT THE AUTO- REGRESSIVE PROPERTY AND TOKEN STATE OF LLM INFERENCE, RESULT- ING IN MISSED OPPORTUNITIES FOR OPTIMIZATION."
  ],
  "124": [
    "SPECIALIZED SERVING SYSTEMS FOR TRANSFORMERS.",
    "DUE TO THE SIGNIFICANCE OF THE TRANSFORMER ARCHITECTURE, NUMEROUS SPECIALIZED SERVING SYSTEMS FOR IT HAVE BEEN DEVELOPED."
  ],
  "548": [
    "THESE SYSTEMS UTILIZE GPU KERNEL OPTIMIZATIONS 1, 29, 31, 56, AD- VANCED BATCHING MECHANISMS 14, 60, MODEL PARALLELISM 1, 41, 60, AND PARAMETER SHARING 64 FOR EFFICIENT SERVING."
  ],
  "169": [
    "AMONG THEM, ORCA 60 IS MOST RELEVANT TO OUR APPROACH."
  ],
  "275": [
    "INDEED, THE FINE-GRAINED SCHED- ULING AND INTERLEAVING OF THE REQUESTS LIKE IN ORCA MAKES MEMORY MANAGEMENT MORE CHALLENGING, MAKING THE TECH- NIQUES PROPOSED IN VLLM EVEN MORE CRUCIAL."
  ],
  "366": [
    "MEMORY OPTIMIZATIONS."
  ],
  "139": [
    "THE WIDENING GAP BETWEEN THE COMPUTE CAPABILITY AND MEMORY CAPACITY OF ACCELERATORS HAS CAUSED MEMORY TO BECOME A BOTTLENECK FOR BOTH TRAINING AND INFERENCE."
  ],
  "161": [
    "SWAPPING 23, 42, 55, RECOMPUTATION 7, 24 AND THEIR COMBINATION 40 HAVE BEEN UTILIZED TO REDUCE THE PEAK MEMORY OF TRAINING."
  ],
  "315": [
    "NOTABLY, FLEXGEN 46 STUDIES HOW TO SWAP WEIGHTS AND TOKEN STATES FOR LLM INFERENCE WITH 623 LIMITED GPU MEMORY, BUT IT DOES NOT TARGET THE ONLINE SERV- ING SETTINGS."
  ],
  "270": [
    "OLLA 48 OPTIMIZES THE LIFETIME AND LOCATION OF TENSORS TO REDUCE FRAGMENTATION, BUT IT DOES NOT DO FINE- GRAINED BLOCK-LEVEL MANAGEMENT OR ONLINE SERVING."
  ],
  "230": [
    "FLASHAT- TENTION 13 APPLIES TILING AND KERNEL OPTIMIZATIONS TO REDUCE THE PEAK MEMORY OF ATTENTION COMPUTATION AND REDUCE IO COSTS."
  ],
  "128": [
    "THIS PAPER INTRODUCES A NEW IDEA OF BLOCK-LEVEL MEM- ORY MANAGEMENT IN THE CONTEXT OF ONLINE SERVING."
  ],
  "125": [
    "ACKNOWLEDGEMENT WE WOULD LIKE TO THANK XIAOXUAN LIU, ZHIFENG CHEN, YAN- PING HUANG, ANONYMOUS SOSP REVIEWERS, AND OUR SHEPHERD, LIDONG ZHOU, FOR THEIR INSIGHTFUL FEEDBACK."
  ],
  "439": [
    "THIS RESEARCH IS PARTLY SUPPORTED BY GIFTS FROM ANDREESSEN HOROWITZ, ANYSCALE, ASTRONOMER, GOOGLE, IBM, INTEL, LACEWORK, MICROSOFT, MO- HAMED BIN ZAYED UNIVERSITY OF ARTIFICIAL INTELLIGENCE, SAM- SUNG SDS, UBER, AND VMWARE."
  ],
  "81": [
    "REFERENCES 1 REZA YAZDANI AMINABADI, SAMYAM RAJBHANDARI, MINJIA ZHANG, AM- MAR AHMAD AWAN, CHENG LI, DU LI, ELTON ZHENG, JEFF RASLEY, SHADEN SMITH, OLATUNJI RUWASE, ET AL."
  ],
  "38": [
    "2022.",
    "2020.",
    "2021.",
    "2023.",
    "2022.",
    "2020.",
    "2022.",
    "2021.",
    "2023.",
    "2021.",
    "2022.",
    "2023.",
    "2020.",
    "2022.",
    "2020.",
    "2020.",
    "2021.",
    "2021.",
    "2023.",
    "2020.",
    "2023.",
    "2023.",
    "2020.",
    "2022.",
    "2023.",
    "2023.",
    "2023.",
    "2022.",
    "2022.",
    "2021.",
    "2023.",
    "2023.",
    "2023.",
    "2022.",
    "(2022).",
    "2023.",
    "2023.",
    "2023.",
    "2022.",
    "2021.",
    "2022.",
    "2020.",
    "2022.",
    "2023.",
    "2022.",
    "2022.",
    "2022."
  ],
  "3": [
    "DEEPSPEED INFERENCE: ENABLING EFFICIENT INFERENCE OF TRANSFORMER MODELS AT UNPRECEDENTED SCALE.",
    "EFFICIENTLY SCALING TRANSFORMER INFERENCE."
  ],
  "75": [
    "ARXIV PREPRINT ARXIV:2207.00032 (2022).",
    "ARXIV PREPRINT ARXIV:1607.06450 (2016).",
    "ARXIV PREPRINT ARXIV:2107.03374 (2021).",
    "ARXIV PREPRINT ARXIV:1604.06174 (2016).",
    "ARXIV PREPRINT ARXIV:2204.02311 (2022).",
    "ARXIV PREPRINT ARXIV:2104.08691 (2021).",
    "ARXIV PREPRINT ARXIV:2101.00190 (2021).",
    "ARXIV PREPRINT ARXIV:2302.11665 (2023).",
    "ARXIV PREPRINT ARXIV:1712.06139 (2017).",
    "ARXIV PREPRINT ARXIV:2211.05102 (2022).",
    "ARXIV PREPRINT ARXIV:2303.06865 (2023).",
    "ARXIV PREPRINT ARXIV:1909.08053 (2019).",
    "ARXIV PREPRINT ARXIV:2302.13971 (2023).",
    "ARXIV PREPRINT ARXIV:2212.10560 (2022).",
    "ARXIV PREPRINT ARXIV:1609.08144 (2016).",
    "ARXIV PREPRINT ARXIV:2205.01068 (2022)."
  ],
  "266": [
    "2 JIMMY LEI BA, JAMIE RYAN KIROS, AND GEOFFREY E HINTON."
  ],
  "28": [
    "2016.",
    "2016.",
    "2016.",
    "2017.",
    "2018.",
    "2016.",
    "2017.",
    "2019.",
    "2019.",
    "2019.",
    "2017.",
    "2018.",
    "2016."
  ],
  "160": [
    "LAYER NORMALIZATION."
  ],
  "337": [
    "3 YOSHUA BENGIO, RJEAN DUCHARME, AND PASCAL VINCENT."
  ],
  "298": [
    "2000."
  ],
  "273": [
    "A NEURAL PROBABILISTIC LANGUAGE MODEL."
  ],
  "127": [
    "ADVANCES IN NEURAL INFORMATION PROCESS- ING SYSTEMS 13 (2000)."
  ],
  "546": [
    "4 OND REJ BOJAR, RAJEN CHATTERJEE, CHRISTIAN FEDERMANN, YVETTE GRA- HAM, BARRY HADDOW, MATTHIAS HUCK, ANTONIO JIMENO YEPES, PHILIPP KOEHN, VARVARA LOGACHEVA, CHRISTOF MONZ, MATTEO NEGRI, AURELIE NEVEOL, MARIANA NEVES, MARTIN POPEL, MATT POST, RAPHAEL RUBINO, CAR- OLINA SCARTON, LUCIA SPECIA, MARCO TURCHI, KARIN VERSPOOR, AND MARCOS ZAMPIERI."
  ],
  "201": [
    "FINDINGS OF THE 2016 CONFERENCE ON MACHINE TRANS- LATION."
  ],
  "148": [
    "IN PROCEEDINGS OF THE FIRST CONFERENCE ON MACHINE TRANSLATION."
  ],
  "129": [
    "ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, BERLIN, GERMANY, 131198."
  ],
  "144": [
    "HTTP:WWW.ACLWEB.ORGANTHOLOGYWW16W16-2301 5 TOM BROWN, BENJAMIN MANN, NICK RYDER, MELANIE SUBBIAH, JARED D KAPLAN, PRAFULLA DHARIWAL, ARVIND NEELAKANTAN, PRANAV SHYAM, GIRISH SASTRY, AMANDA ASKELL, ET AL."
  ],
  "180": [
    "LANGUAGE MODELS ARE FEW-SHOT LEARNERS."
  ],
  "119": [
    "ADVANCES IN NEURAL INFORMATION PROCESSING SYSTEMS 33 (2020), 18771901.",
    "ADVANCES IN NEURAL INFORMATION PROCESSING SYSTEMS 35 (2022), 1634416359.",
    "ADVANCES IN NEURAL INFORMATION PROCESSING SYSTEMS 27 (2014).",
    "ADVANCES IN NEURAL INFORMATION PROCESSING SYSTEMS 30 (2017)."
  ],
  "436": [
    "6 MARK CHEN, JERRY TWOREK, HEEWOO JUN, QIMING YUAN, HENRIQUE PONDE DE OLIVEIRA PINTO, JARED KAPLAN, HARRI EDWARDS, YURI BURDA, NICHOLAS JOSEPH, GREG BROCKMAN, ET AL."
  ],
  "272": [
    "EVALUATING LARGE LANGUAGE MODELS TRAINED ON CODE."
  ],
  "16": [
    "7 TIANQI CHEN, BING XU, CHIYUAN ZHANG, AND CARLOS GUESTRIN.",
    "14 JIARUI FANG, YANG YU, CHENGDUO ZHAO, AND JIE ZHOU.",
    "21 MINGCONG HAN, HANZE ZHANG, RONG CHEN, AND HAIBO CHEN.",
    "22 KAIMING HE, XIANGYU ZHANG, SHAOQING REN, AND JIAN SUN.",
    "23 CHIEN-CHIN HUANG, GU JIN, AND JINYANG LI.",
    "54 JING WANG, YOUYOU LU, QING WANG, MINHUI XIE, KEJI HUANG, AND JIWU SHU.",
    "56 XIAOHUI WANG, YING XIONG, YANG WEI, MINGXUAN WANG, AND LEI LI.",
    "64 ZHE ZHOU, XUECHAO WEI, JIEJING ZHANG, AND GUANGYU SUN."
  ],
  "150": [
    "TRAINING DEEP NETS WITH SUBLINEAR MEMORY COST."
  ],
  "32": [
    "8 WEI-LIN CHIANG, ZHUOHAN LI, ZI LIN, YING SHENG, ZHANGHAO WU, HAO ZHANG, LIANMIN ZHENG, SIYUAN ZHUANG, YONGHAO ZHUANG, JOSEPH E. GONZALEZ, ION STOICA, AND ERIC P. XING.",
    "12 WEIHAO CUI, HAN ZHAO, QUAN CHEN, HAO WEI, ZIRUI LI, DEZE ZENG, CHAO LI, AND MINYI GUO.",
    "28 ZHUOHAN LI, LIANMIN ZHENG, YINMIN ZHONG, VINCENT LIU, YING SHENG, XIN JIN, YANPING HUANG, ZHIFENG CHEN, HAO ZHANG, JOSEPH E GONZALEZ, ET AL.",
    "46 YING SHENG, LIANMIN ZHENG, BINHANG YUAN, ZHUOHAN LI, MAX RYABININ, DANIEL Y FU, ZHIQIANG XIE, BEIDI CHEN, CLARK BARRETT, JOSEPH E GON- ZALEZ, ET AL.",
    "59 YONGHUI WU, MIKE SCHUSTER, ZHIFENG CHEN, QUOC V LE, MOHAMMAD NOROUZI, WOLFGANG MACHEREY, MAXIM KRIKUN, YUAN CAO, QIN GAO, KLAUS MACHEREY, ET AL.",
    "63 LIANMIN ZHENG, ZHUOHAN LI, HAO ZHANG, YONGHAO ZHUANG, ZHIFENG CHEN, YANPING HUANG, YIDA WANG, YUANZHONG XU, DANYANG ZHUO, ERIC P XING, ET AL."
  ],
  "241": [
    "VICUNA: AN OPEN-SOURCE CHATBOT IMPRESSING GPT-4 WITH 90 CHATGPT QUALITY."
  ],
  "89": [
    "HTTPS:LMSYS."
  ],
  "74": [
    "ORGBLOG2023-03-30-VICUNA 9 AAKANKSHA CHOWDHERY, SHARAN NARANG, JACOB DEVLIN, MAARTEN BOSMA, GAURAV MISHRA, ADAM ROBERTS, PAUL BARHAM, HYUNG WON CHUNG, CHARLES SUTTON, SEBASTIAN GEHRMANN, ET AL."
  ],
  "243": [
    "PALM: SCALING LAN- GUAGE MODELING WITH PATHWAYS."
  ],
  "48": [
    "10 DANIEL CRANKSHAW, GUR-EYAL SELA, XIANGXI MO, COREY ZUMAR, ION STOICA, JOSEPH GONZALEZ, AND ALEXEY TUMANOV.",
    "11 DANIEL CRANKSHAW, XIN WANG, GUILIO ZHOU, MICHAEL J FRANKLIN, JOSEPH E GONZALEZ, AND ION STOICA."
  ],
  "229": [
    "INFERLINE: LATENCY- AWARE PROVISIONING AND SCALING FOR PREDICTION SERVING PIPELINES."
  ],
  "422": [
    "IN PROCEEDINGS OF THE 11TH ACM SYMPOSIUM ON CLOUD COMPUTING."
  ],
  "41": [
    "477491.",
    "389402.",
    "443462.",
    "489504."
  ],
  "85": [
    "CLIPPER: A LOW-LATENCY ONLINE PREDICTION SERVING SYSTEM."
  ],
  "134": [
    "IN 14TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI 17).",
    "IN 20TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI 23)."
  ],
  "478": [
    "613627."
  ],
  "183": [
    "DVABATCH: DIVERSITY-AWARE MULTI- ENTRY MULTI-EXIT BATCHING FOR EFFICIENT PROCESSING OF DNN SERVICES ON GPUS."
  ],
  "184": [
    "IN 2022 USENIX ANNUAL TECHNICAL CONFERENCE (USENIX ATC 22).",
    "IN USENIX ANNUAL TECHNICAL CONFERENCE.",
    "IN 2022 USENIX ANNUAL TECHNICAL CONFERENCE (USENIX ATC 22).",
    "IN 2022 USENIX ANNUAL TECHNICAL CONFERENCE (USENIX ATC 22)."
  ],
  "244": [
    "183198."
  ],
  "435": [
    "13 TRI DAO, DAN FU, STEFANO ERMON, ATRI RUDRA, AND CHRISTOPHER R. 2022."
  ],
  "105": [
    "FLASHATTENTION: FAST AND MEMORY-EFFICIENT EXACT ATTENTION WITH IO-AWARENESS."
  ],
  "468": [
    "TURBOTRANS- FORMERS: AN EFFICIENT GPU SERVING SYSTEM FOR TRANSFORMER MODELS."
  ],
  "103": [
    "IN PROCEEDINGS OF THE 26TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING.",
    "IN PROCEEDINGS OF THE 23RD ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING."
  ],
  "101": [
    "15 FASTAPI.",
    "FASTAPI."
  ],
  "233": [
    "HTTPS:GITHUB.COMTIANGOLOFASTAPI."
  ],
  "228": [
    "16 PIN GAO, LINGFAN YU, YONGWEI WU, AND JINYANG LI."
  ],
  "73": [
    "LOW LATENCY RNN INFERENCE WITH CELLULAR BATCHING."
  ],
  "222": [
    "IN PROCEEDINGS OF THE THIRTEENTH EUROSYS CONFERENCE."
  ],
  "182": [
    "115."
  ],
  "200": [
    "17 AMIR GHOLAMI, ZHEWEI YAO, SEHOON KIM, MICHAEL W MAHONEY, AND KURT KEUTZER."
  ],
  "238": [
    "AI AND MEMORY WALL."
  ],
  "471": [
    "RISELAB MEDIUM POST 1 (2021), 6."
  ],
  "80": [
    "18 GITHUB."
  ],
  "110": [
    "HTTPS:GITHUB.COMFEATURESCOPILOT 19 GOOGLE."
  ],
  "114": [
    "HTTPS:BARD.GOOGLE.COM 20 ARPAN GUJARATI, REZA KARIMI, SAFYA ALZAYAT, WEI HAO, ANTOINE KAUF- MANN, YMIR VIGFUSSON, AND JONATHAN MACE."
  ],
  "168": [
    "SERVING DNNS LIKE CLOCKWORK: PERFORMANCE PREDICTABILITY FROM THE BOTTOM UP."
  ],
  "166": [
    "IN 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI 20).",
    "IN PROCEEDINGS OF THE 14TH USENIX CONFERENCE ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION.",
    "IN 16TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI 22).",
    "IN 16TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI 22)."
  ],
  "202": [
    "MICROSECOND-SCALE PREEMPTION FOR CONCURRENT GPU- ACCELERATEDDNN INFERENCES."
  ],
  "274": [
    "IN 16TH USENIX SYMPOSIUM ON OPER- ATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI 22)."
  ],
  "15": [
    "539558.",
    "551564.",
    "521538.",
    "559578."
  ],
  "185": [
    "DEEP RESIDUAL LEARNING FOR IMAGE RECOGNITION."
  ],
  "157": [
    "IN PROCEEDINGS OF THE IEEE CONFERENCE ON COMPUTER VISION AND PATTERN RECOGNITION."
  ],
  "59": [
    "770778.",
    "773788."
  ],
  "106": [
    "SWAPADVISOR: PUSH- ING DEEP LEARNING BEYOND THE GPU MEMORY LIMIT VIA SMART SWAPPING."
  ],
  "217": [
    "IN PROCEEDINGS OF THE TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHI- TECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS."
  ],
  "43": [
    "13411355.",
    "113120."
  ],
  "78": [
    "24 PARAS JAIN, AJAY JAIN, ANIRUDDHA NRUSIMHA, AMIR GHOLAMI, PIETER ABBEEL, JOSEPH GONZALEZ, KURT KEUTZER, AND ION STOICA.",
    "40 SHISHIR G PATIL, PARAS JAIN, PRABAL DUTTA, ION STOICA, AND JOSEPH GON- ZALEZ."
  ],
  "393": [
    "CHECK- MATE: BREAKING THE MEMORY WALL WITH OPTIMAL TENSOR REMATERIALIZATION."
  ],
  "204": [
    "624 PROCEEDINGS OF MACHINE LEARNING AND SYSTEMS 2 (2020), 497511."
  ],
  "226": [
    "25 TOM KILBURN, DAVID BG EDWARDS, MICHAEL J LANIGAN, AND FRANK H SUMNER."
  ],
  "146": [
    "1962."
  ],
  "145": [
    "ONE-LEVEL STORAGE SYSTEM."
  ],
  "261": [
    "IRE TRANSACTIONS ON ELECTRONIC COMPUTERS 2 (1962), 223235."
  ],
  "246": [
    "26 BRIAN LESTER, RAMI AL-RFOU, AND NOAH CONSTANT."
  ],
  "253": [
    "THE POWER OF SCALE FOR PARAMETER-EFFICIENT PROMPT TUNING."
  ],
  "227": [
    "27 XIANG LISA LI AND PERCY LIANG."
  ],
  "95": [
    "PREFIX-TUNING: OPTIMIZING CONTIN- UOUS PROMPTS FOR GENERATION."
  ],
  "159": [
    "29 LINGXIAO MA, ZHIQIANG XIE, ZHI YANG, JILONG XUE, YOUSHAN MIAO, WEI CUI, WENXIANG HU, FAN YANG, LINTAO ZHANG, AND LIDONG ZHOU."
  ],
  "102": [
    "RAMMER: ENABLING HOLISTIC DEEP LEARNING COMPILER OPTIMIZATIONS WITH RTASKS."
  ],
  "133": [
    "30 NVIDIA.",
    "31 NVIDIA.",
    "32 NVIDIA."
  ],
  "195": [
    "N. D.. TRITON INFERENCE SERVER."
  ],
  "68": [
    "HTTPS:DEVELOPER.NVIDIA.COM NVIDIA-TRITON-INFERENCE-SERVER.",
    "HTTPS:DEVELOPER.NVIDIA.COMNCCL."
  ],
  "107": [
    "HTTPS:GITHUB.COMNVIDIA FASTERTRANSFORMER."
  ],
  "210": [
    "NCCL: THE NVIDIA COLLECTIVE COMMUNICATION LIBRARY."
  ],
  "440": [
    "33 CHRISTOPHER OLSTON, NOAH FIEDEL, KIRIL GOROVOY, JEREMIAH HARMSEN, LI LAO, FANGWEI LI, VINU RAJASHEKHAR, SUKRITI RAMESH, AND JORDAN SOYKE."
  ],
  "104": [
    "TENSORFLOW-SERVING: FLEXIBLE, HIGH-PERFORMANCE ML SERVING."
  ],
  "235": [
    "34 OPENAI."
  ],
  "203": [
    "HTTPS:OPENAI.COMBLOGOPENAI-API 35 OPENAI.",
    "HTTPS:OPENAI.COMBLOGCHATGPT 36 OPENAI.",
    "HTTPS:OPENAI.COMBLOGCUSTOM-INSTRUCTIONS-FOR- CHATGPT 37 OPENAI."
  ],
  "108": [
    "GPT-4 TECHNICAL REPORT."
  ],
  "207": [
    "ARXIV:2303.08774 CS.CL 38 LMSYS ORG."
  ],
  "143": [
    "CHATBOT ARENA LEADERBOARD WEEK 8: INTRODUC- ING MT-BENCH AND VICUNA-33B."
  ],
  "351": [
    "HTTPS:LMSYS.ORGBLOG2023-06-22- LEADERBOARD."
  ],
  "72": [
    "39 ADAM PASZKE, SAM GROSS, FRANCISCO MASSA, ADAM LERER, JAMES BRADBURY, GREGORY CHANAN, TREVOR KILLEEN, ZEMING LIN, NATALIA GIMELSHEIN, LUCA ANTIGA, ET AL."
  ],
  "482": [
    "PYTORCH: AN IMPERATIVE STYLE, HIGH-PERFORMANCE DEEP LEARNING LIBRARY."
  ],
  "240": [
    "ADVANCES IN NEURAL INFORMA- TION PROCESSING SYSTEMS 32 (2019)."
  ],
  "121": [
    "POET: TRAINING NEURAL NETWORKS ON TINY DEVICES WITH INTEGRATED REMATERIALIZATION AND PAGING."
  ],
  "52": [
    "IN INTERNATIONAL CONFERENCE ON MACHINE LEARNING."
  ],
  "408": [
    "PMLR, 1757317583."
  ],
  "174": [
    "41 REINER POPE, SHOLTO DOUGLAS, AAKANKSHA CHOWDHERY, JACOB DEVLIN, JAMES BRADBURY, ANSELM LEVSKAYA, JONATHAN HEEK, KEFAN XIAO, SHIVANI AGRAWAL, AND JEFF DEAN."
  ],
  "135": [
    "42 JIE REN, SAMYAM RAJBHANDARI, REZA YAZDANI AMINABADI, OLATUNJI RUWASE, SHUANGYAN YANG, MINJIA ZHANG, DONG LI, AND YUXIONG HE."
  ],
  "234": [
    "ZERO-OFFLOAD: DEMOCRATIZING BILLION-SCALE MODEL TRAINING.."
  ],
  "86": [
    "43 REUTERS."
  ],
  "175": [
    "HTTPS:WWW.REUTERS.COMTECHNOLOGYTECH-GIANTS-AI- LIKE-BING-BARD-POSES-BILLION-DOLLAR-SEARCH-PROBLEM-2023-02-22 44 AMAZON WEB SERVICES."
  ],
  "528": [
    "HTTPS:AWS.AMAZON.COMBEDROCK 45 HAICHEN SHEN, LEQUN CHEN, YUCHEN JIN, LIANGYU ZHAO, BINGYU KONG, MATTHAI PHILIPOSE, ARVIND KRISHNAMURTHY, AND RAVI SUNDARAM."
  ],
  "267": [
    "NEXUS: A GPU CLUSTER ENGINE FOR ACCELERATING DNN-BASED VIDEO ANAL- YSIS."
  ],
  "93": [
    "IN PROCEEDINGS OF THE 27TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES."
  ],
  "500": [
    "322337."
  ],
  "219": [
    "HIGH-THROUGHPUT GENERATIVE INFERENCE OF LARGE LANGUAGE MODELS WITH A SINGLE GPU."
  ],
  "398": [
    "47 MOHAMMAD SHOEYBI, MOSTOFA PATWARY, RAUL PURI, PATRICK LEGRESLEY, JARED CASPER, AND BRYAN CATANZARO."
  ],
  "126": [
    "MEGATRON-LM: TRAINING MULTI- BILLION PARAMETER LANGUAGE MODELS USING MODEL PARALLELISM."
  ],
  "109": [
    "48 BENOIT STEINER, MOSTAFA ELHOUSHI, JACOB KAHN, AND JAMES HEGARTY."
  ],
  "262": [
    "OLLA: OPTIMIZING THE LIFETIME AND LOCATION OF ARRAYS TO REDUCE THE MEMORY USAGE OF NEURAL NETWORKS."
  ],
  "263": [
    "HTTPS:DOI.ORG10.48550 ARXIV.2210.12924 49 ILYA SUTSKEVER, ORIOL VINYALS, AND QUOC V LE."
  ],
  "499": [
    "2014."
  ],
  "153": [
    "SEQUENCE TO SE- QUENCE LEARNING WITH NEURAL NETWORKS."
  ],
  "112": [
    "50 ROHAN TAORI, ISHAAN GULRAJANI, TIANYI ZHANG, YANN DUBOIS, XUECHEN LI, CARLOS GUESTRIN, PERCY LIANG, AND TATSUNORI B. HASHIMOTO.",
    "55 LINNAN WANG, JINMIAN YE, YIYANG ZHAO, WEI WU, ANG LI, SHUAI- WEN LEON SONG, ZENGLIN XU, AND TIM KRASKA.",
    "57 YIZHONG WANG, YEGANEH KORDI, SWAROOP MISHRA, ALISA LIU, NOAH A SMITH, DANIEL KHASHABI, AND HANNANEH HAJISHIRZI."
  ],
  "237": [
    "STANFORD ALPACA: AN INSTRUCTION-FOLLOWING LLAMA MODEL."
  ],
  "100": [
    "HTTPS: GITHUB.COMTATSU-LABSTANFORDALPACA."
  ],
  "394": [
    "51 SHAREGPT TEAM."
  ],
  "99": [
    "HTTPS:SHAREGPT.COM 52 HUGO TOUVRON, THIBAUT LAVRIL, GAUTIER IZACARD, XAVIER MARTINET, MARIE- ANNE LACHAUX, TIMOTHE LACROIX, BAPTISTE ROZIRE, NAMAN GOYAL, ERIC HAMBRO, FAISAL AZHAR, ET AL."
  ],
  "113": [
    "LLAMA: OPEN AND EFFICIENT FOUNDATION LANGUAGE MODELS."
  ],
  "53": [
    "53 ASHISH VASWANI, NOAM SHAZEER, NIKI PARMAR, JAKOB USZKOREIT, LLION JONES, AIDAN N GOMEZ, UKASZ KAISER, AND ILLIA POLOSUKHIN."
  ],
  "36": [
    "AT- TENTION IS ALL YOU NEED."
  ],
  "69": [
    "PACMAN: AN EFFICIENT COMPACTION APPROACH FOR LOG- STRUCTUREDKEY-VALUE STORE ON PERSISTENT MEMORY."
  ],
  "83": [
    "SUPERNEURONS: DY- NAMIC GPU MEMORY MANAGEMENT FOR TRAINING DEEP NEURAL NETWORKS."
  ],
  "249": [
    "4153."
  ],
  "264": [
    "LIGHTSEQ: A HIGH PERFORMANCE INFERENCE LIBRARY FOR TRANSFORM- ERS."
  ],
  "196": [
    "IN PROCEEDINGS OF THE 2021 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECH- NOLOGIES: INDUSTRY PAPERS."
  ],
  "92": [
    "SELF-INSTRUCT: ALIGNING LANGUAGE MODEL WITH SELF GENERATED INSTRUCTIONS."
  ],
  "276": [
    "58 THOMAS WOLF, LYSANDRE DEBUT, VICTOR SANH, JULIEN CHAUMOND, CLEMENT DELANGUE, ANTHONY MOI, PIERRIC CISTAC, TIM RAULT, RMI LOUF, MORGAN FUNTOWICZ, ET AL."
  ],
  "250": [
    "TRANSFORMERS: STATE-OF-THE-ART NATURAL LANGUAGE PROCESSING."
  ],
  "198": [
    "IN PROCEEDINGS OF THE 2020 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING: SYSTEM DEMONSTRATIONS."
  ],
  "223": [
    "3845."
  ],
  "97": [
    "GOOGLES NEURAL MACHINE TRANSLATION SYSTEM: BRIDGING THE GAP BETWEEN HUMAN AND MACHINE TRANSLATION."
  ],
  "165": [
    "60 GYEONG-IN YU, JOO SEONG JEONG, GEON-WOO KIM, SOOJEONG KIM, AND BYUNG-GON CHUN."
  ],
  "76": [
    "ORCA: A DISTRIBUTED SERVING SYSTEM FOR TRANSFORMER-BASED GENERATIVE MODELS."
  ],
  "98": [
    "61 HONG ZHANG, YUPENG TANG, ANURAG KHANDELWAL, AND ION STOICA."
  ],
  "141": [
    "SHEPHERD: SERVING DNNS IN THE WILD."
  ],
  "137": [
    "USENIX AS- SOCIATION, BOSTON, MA, 787808."
  ],
  "142": [
    "HTTPS:WWW.USENIX.ORGCONFERENCE NSDI23PRESENTATIONZHANG-HONG 625 62 SUSAN ZHANG, STEPHEN ROLLER, NAMAN GOYAL, MIKEL ARTETXE, MOYA CHEN, SHUOHUI CHEN, CHRISTOPHER DEWAN, MONA DIAB, XIAN LI, XI VICTORIA LIN, ET AL."
  ],
  "49": [
    "OPT: OPEN PRE-TRAINED TRANSFORMER LANGUAGE MODELS."
  ],
  "156": [
    "ALPA: AUTOMATING INTER-AND INTRA-OPERATOR PARALLELISM FOR DISTRIBUTED DEEP LEARNING."
  ],
  "369": [
    "PETS: A UNIFIED FRAMEWORK FOR PARAMETER-EFFICIENT TRANSFORMERS SERVING."
  ],
  "181": [
    "626"
  ]
}